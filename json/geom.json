{
    "Ingest_LDD": {
        "$": {
            "xmlns": "http://pds.nasa.gov/pds4/pds/v1",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xsi:schemaLocation": "http://pds.nasa.gov/pds4/pds/v1\n                     http://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1900.xsd"
        },
        "name": ["Geometry Dictionary Full"],
        "ldd_version_id": ["1.5.1.0"],
        "full_name": ["Edward A. Guinness"],
        "steward_id": ["geo"],
        "namespace_id": ["geom"],
        "comment": ["\n    \tClasses used from the PDS namespace\n    \t  - Local_Internal_Reference\n    \t  - Internal_Reference\n    \tAttributes used from the PDS namespace\n    \t  - local_identifier\n    \t  - name\n    \t  - comment\n    \t  - kernel_type\n    \t  - local_reference_type\n    \t  - reference_type\n\n    \tversion 1.0.0 2015-04-30\n        - Initial release.\n        version 1.1.0 2015-08-17\n        - Updated to IM version 1.4.1.0\n        - Removed attributes body_spice_id and frame_spice_id. body_spice_name and frame_spice_name are the supported attributes.\n        - Geometry_Identification_Base was replaced by Body_Identification_Base and Frame_Identification_Base.\n          -- The preceding two changes affect these classes: Central_Body_Identification,\n             Coordinate_System_Origin_Identification, Observer_Identification, Target_Identification.\n        - Added the class Coordinate_Space_SPICE.\n        - SPICE_Kernel_Identification was replaced with the new class Coordinate_Space_SPICE in Coordinate_Space_Identification.\n        - Replaced local_spice_kernel_name with spice_kernel_file_name.\n        - Changed kernel_type to pds:kernel_type.\n          -- The preceding four changes affect Coordinate_Space_Present and Coordinate_Space_Reference.\n        - horizontal/vertical_pixel_scale_factor now have unit of measure type Units_of_Map_scale (these are all of the\n          form \"[length]/pixel\").\n        - In Geometry_Orbiter class, expanded description to include class use.\n        - Quaternion_non_SPICE_Style contained a double underscore in the class name. That typo has been corrected.\n        - Updated a number of the attribute and class definitions/descriptions\n        - In the Geometry_Orbiter class, Reference_Frame_Identification was removed.\n        - Added class Coordinate_Space_Indexed\n        - Moved solution_id attribute from Coordinate_Space_Index to Coordinate_Space_Indexed\n        - Removed model_desc_file_name from Camera_Model_Parameters\n        - Replaced Coordinate_Space_Index with Coordinate_Space_Indexed in Coordinate_Space_Identification\n        - Added Local_Internal_Reference to Coordinate_Space_Index\n        - Added attribute coordinate_space_frame_type\n        - Renamed Device_Motor_Clicks* to Device_Motor_Counts*\n        - Renamed Device_Position_Vector to Vector_Device_Gravity\n        - Renamed index_value_no_units to index_value_number.\n        - Completely revised quaternions, removed all four existing quaternion classes,\n          Quaternion_SPICE, Quaternion_non_SPICE, Rotation_Quaternion, and Device_Orientation_Quaternion.\n          Introduced three new quaternion classes, Quaternion_Base, Quaternion_1, and Quaternion_2. The latter\n          two are extensions of Quaternion_Base.\n        - Revised the definitions of the four components of quaternions.\n        - Added the classes Rotate_From, Rotate_To, and the attribute rotation_direction to\n          support the new quaternion classes.\n        - Added Coordinate_Space_Present to the Articulation_Device_Parameters class.\n        - Renamed Coordinate_System to Coordinate_System_Identification.\n        - In Coordinate_Space_Indexed changed Coordinate_Space_Index from parent_of to component_of\n        - Removed pds:Local_Internal_Reference from Coordinate_Space_Index, Body_Identification_Base, Frame_Identification_Base.\n        - Removed the quaternions from the Articulation_Device_Parameters class.\n        - Cleaned up some more definitions.\n        version 1.2.0   2015-10-15\n        - Updated to IM version 1.5.0.0\n        - Redefined the Display_Direction class and removed the import of the\n          Display dictionary.\n        - Designated Body_Identification_Base as 'abstract'\n        - Renamed Target_Identification to Geometry_Target_Identification\n        - Renamed horizontal/vertical_pixel_size_angular to horizontal/vertical_pixel_field_of_view\n        - Renamed horizontal/vertical_pixel_size_projected to horizontal/vertical_pixel_footprint\n        - Removed Body_Identification_Base from Image_Display\n        - removed body_positive_pole_clock_angle\n        - added central_body_positive_pole_clock_angle\n        - Removed Local_Internal_Reference from several classes\n        - Removed horizontal/vertical_pixel_scale_factor\n        - Updated horizontal/vertical_pixel_field_of_view descriptions\n        - Added new, required attribute pixel_field_of_view_method attribute to Pixel_Dimensions\n        - Allow for multiple Pixel_Size_Projected classes to be specified in the Pixel_Dimensions class.\n        - Revised the definition of Footprint_Vertices and set the minimum number of vertices to two.\n        - Added choice between reference_location and new distance attribute in Pixel_Size_Projected class.\n        - Added 'Constant' (or some other applicable term per rationale) as a permissible value to Pixel_Size_Projected and reference_location.\n        - Require horizontal_pixel_footprint and vertical_pixel_footprint to be specified in Pixel_Size_Projected class.\n        - added cahvore_model_type and cahvore_model_parameter attributes to CAHVORE_Model\n        - added new positive_azimuth_direction and positive_elevation_direction attributes to Coordinate_Space_Definition class\n        - added new instrument_azimuth, instrument_elevation attributes to Derived_Geometry\n        - added new selected_instrument_id attribute to Articulation_Device_Parameters for currently selected instrument\n        - added new device_phase attribute to Articulation_Device_Parameters\n        - added new Quaternion_Model_Transform and Vector_Model_Transform classes to the Camera_Model_Parameters class\n        - fixed bug with Vector_Cartesian_No_Units class - local identifier was Vector_Cartesian_Unit and overwriting that class\n        - changed parent_of Vector_Axis class to Vector_Cartesian_No_Units\n        - changed parent_of Vector_Device_Gravity class to Vector_Cartesian_Unit instead of Position_Cartesion_Vector_Base since it is a unit vector\n        - added pds:Local_Internal_Reference to Coordinate_Space_Identification class, specifically for properly defining a Coordinate_Space_Reference.\n        - updated the definition for coordinate_space_frame_type\n        - changed ordering of Coordinate_Space_Indexed to make more logical sense\n        - changed local_identifier attribute in Coordinate_Space_Definition class to allow for mutliple identifiers for a Coordinate Space\n        - removed units from x_pixel, y_pixel, z_pixel\n        - changed x_no_units, y_no_units, z_no_units to x,y,z\n        - removed Coordinate_Space_Reference from CAHV_Model class. It only needs to be in the Camera_Model_Parameters class\n        - north/east_azimuth - expanded definition to clarify direction of measurement.\n        - renamed the Distances class to Specific_Distances, removed the Distance_Generic class\n          from that class and added it to Geometry_Orbiter.\n        - removed the Specific_Position_Vectors and Specific_Velocity_Vectors classes. The remaining Vector aggragating classss\n          are Specific_Cartesian_Vectors and Specific_Planetocentric_Vectors.\n        - Renamed 59 classes for clarity or to make the order of the class name segments consistent with SR requirements. See\n          the separate class-rename-20151016.txt document for the complete list.\n        version 1.2.1   2015-11-12 (this version not released for review)\n        - Inserted a missing \")\" in Schematron file to correct a typo.\n        - changed several instances of a double underscore to a single underscore.\n        - Removed Local_Reference_Type from geom:Display_Direction.\n        - Added Schematron rule for Image_Display_Geometry/Local_Internal_Reference/Reference_Type to verify\n          use of the enumerated value \"display_to_data_object\".\n        - In Geometry_Orbiter, moved the class Geometry_Target_Identification ahead of the class Coordinate_System Identification.\n          This results in placing at the beginning of the class, the items most likely to have multiple\n          values and hence result in multiple instances of the Geometry_Orbiter class.\n        version 1.3.0.0   2016-07-15\n        - Updated to IM version 1.6.0.0\n        - Changed to four place version number.\n        - Added geometry_start_time and geometry_stop_time, and expanded the definitions for the three variations\n          of geometry_*_time.\n        - Made geom:Display_Direction required even if the disp:Display_Direction is in the label.\n        - Removed the option to use Quaternion_1 from the Image_Display_Geometry class since there is no way to identify\n          the relevant end points in the enclosing class.\n        - Revised the definition of right_ascension_angle.\n        - Changed the description and units of right_ascension_hour_angle to decimal hours.\n        - Revised the definition of declination_angle.\n        - In Object_Orientation_Clock_Angles, made Reference_Frame_Identification optional instead of required.\n        - Added or modified attributes minimum_*, maximum_*, start_*, stop_*; where * is any of target_geocentric_distance,\n          target_heliocentric_distance, target_ssb_distance, spacecraft_geocentric_distance, spacecraft_heliocentric_distance,\n          spacecraft_to_central_body_distance, spacecraft_to_target_center_distance, spacecraft_to_target_boresight_intercept_distance,\n          spacecraft_to_target_subspacecraft_distance, emission_angle, incidence_angle, phase_angle, solar_elongation, latitude,\n          longitude, subspacecraft_azimuth, subspacecraft_latitude, subspacecraft_longitude, subsolar_azimuth, subsolar_latitude,\n          or subsolar_longitude.\n        - Added the attribute lat_long_description to support start_ and stop_ latitude and longitude.\n        - Added the classes *_Specific, *_Min_Max, *_Start_Stop; where * is any of Distances, Illumination, or Surface_Geometry.\n        - Removed the classes Illumination_FOV_Range_Values (replaced with the class Illumination_Min_Max), and\n          Illumination_Single_Values (replaced with the class Illumination_Specific).\n        - Removed the attribute illumination_range_designation.\n        - Changed the names of several specific distance classes from spacecraft_to_*_distance to spacecraft_*_distance.\n        - Renamed Specific_Distances to Distances_Specific.\n        - Renamed Surface_Geometry to Surface_Geometry_Specific.\n        - Renamed Illumination_Single_Values to Illumination_Specific.\n        - Renamed Specific_Cartesian_Vectors to Vectors_Cartesian_Specific.\n        - Renamed Specific_Planetocentric_Vectors to Vectors_Planetocentric_Specific.\n        - Added or redefined several classes for grouping: Orbiter_Identification, Distances, Surface_Geometry,\n          Illumination_Geometry, Vectors.\n        - Reorganized the contents of Geometry_Orbiter.\n        - Provided Schematron rules to ensure if one member of a min-max or start-stop pair is used, both are used.\n        - Renamed lat_long_description to lat_long_method\n        - Renamed Quaternion_1 to Quaternion_Plus_Direction\n        - Renamed Quaternion_2 to Quaternion_Plus_To_From\n        - In List_Index_Base removed Local_Internal_Reference and made the cardinality of the choice to require at\n          least one of the options.\n        - Updated the definitions of several attributes supporting the Lander portion of the dictionary.\n        - Changed pds:Internal_Reference to geom:Internal_Reference\n        - Changed pds:Local_Internal_Reference to geom:Local_Internal_Reference\n        - In the Geometry class, removed the choice statement which made one of Geometry_Orbiter and Geometry_Lander required. Now both are optional.\n        version 1.3.1.0   2016-07-29\n        - Added the optional attribute kernel_provenance to the SPICE_Kernel_Identification class.\n        - Renamed geometry_reference_time, geometry_start/stop_time, and coordinate_system_time, by appending _utc to the attribute name.\n        - Added the optional attribute geometry_reference_time_tdb\n        - Changed the cardinality of Quaternion_Plus_To_From in the Image_Display_Geometry to allow multiple instances.\n        - Added the optional Expanded_Geometry class to the Geometry class\n        version 1.4.0.0   2016-09-26\n        - Verified that Internal_Reference and Local_Internal_Reference refer to the PDS namespace in class definitions\n        - Edited Schematron rules to change geom:Internal_Reference to pds:Internal_Reference\n        - Edited Schematron rules to match Internal_Reference contexts with reference_type rule_test\n        - Edited Schematron messages to be more user-friendly\n        - Remove reference_type and local_reference_type from Schematron rule contexts\n        - Edited Schematron rules to change geom:Local_Internal_Reference to pds:Local_Internal_Reference\n        - Edited Schematron rules to match Local_Internal_Reference contexts with local_reference_type rule_text\n        version 1.4.0.1  2016-11-10\n        - Changed pds:name to geom:name in the schematron rules\n        version 1.5.0.0  2017-06-19\n        - Regenerated the schema and other files because of a bug in the LDDTool - This changed the classes:\n               Coordinate_Space_Identification, Coordinate_Space_Present, Coordinate_Space_Reference\n        - Changed the maxoccurs to unbounded for Coordinate_Space_Index in Coordinate_Space_Indexed\n        - Changed the choice in Derived_Geometry to include all optional attributes. This was done to ensure that the class contained at least one\n               attribute when included in a label.\n        version 1.5.1.0  2018-09-20\n        - Added index_value_number to List_Index_Temperature to specify DN temperature counts in addition to the EU temperature\n        - Updated the definition for List_Index_Temperature to include that\n        - Fixed bug with Vector_Entrance to use Vector_Cartesian_Unit instead of Vector_Cartesian_Position_Base\n        - Updated for PDS model 1.9.0.0\n    "],
        "last_modification_date_time": ["2017-09-28"],
        "DD_Attribute": [{
            "name": ["geometry_reference_time_utc"],
            "version_id": ["1.0"],
            "local_identifier": ["geometry_reference_time_utc"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["For some observations, geometric parameters are given as instantaneous\n        \tvalues at a specific time. Another set of instantaneous parameters are the\n        \tparameters which give the minimum and maximum values in the product.\n        \tIn some cases, these range values are all calculated for the same time.\n        \tIf the label includes single valued geometric parameters or min/max range parameters\n        \tdetermined for a specific time, geometry_reference_time_utc gives the time for which\n        \tthese values were calculated and must be given in the label.\n\n          For some instruments, particularly those with relatively large exposure durations,\n          (e.g., push broom cameras, many imaging spectrometers), many geometric quantities\n          are given as ranges. If those range parameters are associated with the beginning\n          and end of the observation (start_parameter/stop_parameter), geometry_start_time_utc/stop_time\n          must be given.\n\n          Comments within the label should be used to ensure the parameter vs. time association\n          is unambiguous.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Date_Time_YMD_UTC"]
            }]
        }, {
            "name": ["geometry_reference_time_tdb"],
            "version_id": ["1.0"],
            "local_identifier": ["geometry_reference_time_tdb"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The geometry reference time given in the 'Barycentric Dynamical Time'\n        \t  system, as a number of elapsed seconds since the J2000 epoch. This is consistent\n        \t  with the definition of 'ephemeris time' as used in the SPICE toolkit. The value\n        \t  must correspond to the time specified in the geometry_reference_time_utc attribute.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Time"]
            }]
        }, {
            "name": ["geometry_start_time_utc"],
            "version_id": ["1.0"],
            "local_identifier": ["geometry_start_time_utc"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The pair of geometry_start_time_utc/geometry_stop_time_utc may be given in the\n        \tlabel for any observation. The pair is generally used for fairly long duration\n        \tobservations (a substantial portion of an hour to several hours). geometry_start_time_utc\n        \tgives the time at the beginning of the observation.\tWhen either geometry_start_time_utc\n        \tor geometry_stop_time_utc is given, both must be provided.\n\n          Within the Geometry discipline, there are two options for providing geometric parameters\n          as a range of values. A parameter may be given as a pair where the parameter values are\n          those at the beginning and end of the observation (start_parmeter, stop_parameter).\n          If a (start_parmeter, stop_parameter) pair is used for any geometric parameter, the pair\n          (geometry_start_time_utc/geometry_stop_time_utc) must be given.\n\n          Another option to provide geometric parameters as a pair is (minimum_parmeter, maximum_parameter)\n          defining a range of values where the values are the minimum and maximum values of that\n          parameter for the entire observation.\n\n          Comments within the label should be used to ensure the parameter vs. time association\n          is unambiguous.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Date_Time_YMD_UTC"]
            }]
        }, {
            "name": ["geometry_stop_time_utc"],
            "version_id": ["1.0"],
            "local_identifier": ["geometry_stop_time_utc"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The pair of geometry_start_time_utc/geometry_stop_time_utc may be given in the\n        \tlabel for any observation. The pair is generally used for fairly long duration\n          observations (a substantial portion of an hour to several hours). geometry_stop_time_utc\n        \tgives the time at the end of the observation.\tWhen either geometry_start_time_utc\n        \tor geometry_stop_time_utc is given, both must be provided.\n\n          Within the Geometry discipline, there are two options for providing geometric parameters\n          as a range of values. A parameter may be given as a pair where the parameter values are\n          those at the beginning and end of the observation (start_parmeter, stop_parameter).\n          If a (start_parmeter, stop_parameter) pair is used for any geometric parameter, the pair\n          (geometry_start_time_utc/geometry_stop_time_utc) must be given.\n\n          Another option to provide geometric parameters as a pair is (minimum_parmeter, maximum_parameter)\n          defining a range of values where the values are the minimum and maximum values of that\n          parameter for the entire observation.\n\n          Comments within the label should be used to ensure the parameter vs. time association\n          is unambiguous.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Date_Time_YMD_UTC"]
            }]
        }, {
            "name": ["coordinate_system_type"],
            "version_id": ["1.0"],
            "local_identifier": ["coordinate_system_type"],
            "nillable_flag": ["true"],
            "submitter_name": ["M. Gordon"],
            "definition": ["The coordinate_system_type distinguishes between options such as\n           rectangular, spherical, planetocentric, etc.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Cartesian"],
                    "value_meaning": ["The coordinate system uses rectangular coordinates.\n                "]
                }, {
                    "value": ["Azimuth-Elevation"],
                    "value_meaning": ["The coordinate system uses azimuth-elevation coordinates.\n                  Azimuth: angle from +X axis to projection of position vector on x-y\n                  plane increases in clockwise direction (-180 to +180).\n                  Elevation: angle between position vector and x-y plane (-90 to +90).\n                "]
                }, {
                    "value": ["Spherical"],
                    "value_meaning": ["The coordinate system uses spherical coordinates.\n                  Longitude: angle from +X axis to projection of position vector on\n                  X-Y plane increases in clockwise direction (0 to 360).\n                  Colatitude: angle between +Z axis and position vector (0 to 180).\n                "]
                }, {
                    "value": ["Planetocentric"],
                    "value_meaning": ["The coordinate system uses planetocentric coordinates.\n                    Planetocentric longitude increases positively eastward (-180 to +180).\n                    Planetocentric latitude increases positively northward (-90 to +90).\n                    For planets and their satellites the +Z axis (+90 latitude) always\n                    points to the north side of the invariable plane (the plane whose\n                    normal vector is the angular momentum vector of the solar system).\n                    For dwarf planets, asteroids and comets the IAU defines their positive\n                    pole such that their spin is in the right hand sense about\n                    their positive pole. The positive pole may point above or below the\n                    invariable plane of the solar system. This revision by the IAU Working\n                    Group (2006) inverts what had been the direction of the north pole for\n                    Pluto, Charon and Ida.\n                "]
                }, {
                    "value": ["Planetodetic"],
                    "value_meaning": ["The coordinate system uses planetodetic coordinates.\n                   For planets and their satellites the +Z axis (+90 latitude) always\n                   points to the north side of the invariable plane (the plane whose\n                   normal vector is the angular momentum vector of the solar system).\n                   Planetodetic longitude increases positively eastward (-180 to +180).\n                   Planetodetic latitude is tied to a reference ellipsoid. For a point,\n                   P, on a reference ellipsoid, angle measured from X-Y plane to the\n                   surface normal at the point of interest. For other points, equals\n                   latitude at the nearest point on the reference ellipsoid. Increases\n                   positively northward (-90 to +90).\n                "]
                }, {
                    "value": ["Planetographic"],
                    "value_meaning": ["The coordinate system uses planetographic coordinates.\n                  For planet and satellite planetographic coordinate systems:\n                  Planetographic longitude is usually defined such that the sub-observer\n                  longitude increases with time as seen by a distant, fixed observer\n                  (0 to 360). The earth, moon and sun are exceptions; planetographic\n                  longitude is positive east by default (0 to 360). Planetographic\n                  latitude is planetodetic latitude (-90 to +90).\n                  For dwarf planets, asteroids and comets: there are multiple, inconsistent\n                  standards. Currently, for these objects, PDS permits planetographic\n                  coordinates to be provided in addition to, not in lieu of, either\n                  planetocentric or planetodetic coordinates.\n                "]
                }]
            }]
        }, {
            "name": ["coordinate_system_time_utc"],
            "version_id": ["1.0"],
            "local_identifier": ["coordinate_system_time_utc"],
            "nillable_flag": ["false"],
            "submitter_name": ["M. Gordon"],
            "definition": ["The coordinate_system_time_utc provides the instantiation\n          time for the coordinate system.\n         "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Date_Time_YMD_UTC"]
            }]
        }, {
            "name": ["body_spice_name"],
            "version_id": ["1.0"],
            "local_identifier": ["body_spice_name"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The body_spice_name attribute is a NAIF-recognized string\n            identifier for a physical object (spacecraft, planet, instrument\n            transmitter, system barycenter, etc.), associated with the data.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["frame_spice_name"],
            "version_id": ["1.0"],
            "local_identifier": ["frame_spice_name"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The frame_spice_name attribute is a NAIF-recognized string\n            identifier for a reference frame associated with the data.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["reference_location"],
            "version_id": ["1.0"],
            "local_identifier": ["reference_location"],
            "nillable_flag": ["false"],
            "submitter_name": ["M. Gordon"],
            "definition": ["The reference_location indicates the position to which\n          values in the containing class apply. If the reference location is on\n          a target, the target is the one specified in the parent\n          Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Boresight Intercept Point"],
                    "value_meaning": ["Values were determined for the point where the\n                               boresight vector intersects the designated target.\n                "]
                }, {
                    "value": ["Subspacecraft Point"],
                    "value_meaning": ["Values were determined for the subspacecraft point\n                               on the designated target.\n                "]
                }, {
                    "value": ["Target Center"],
                    "value_meaning": ["Values were determined for the center of the designated\n                  target.\n                "]
                }, {
                    "value": ["Constant"],
                    "value_meaning": ["Constant is used when the pixel scale does not vary, e.g.,\n              \tfor telecentric lenses, maps, or cameras that look at constant, fixed targets,\n              \tsuch as microscope stages.\n              "]
                }]
            }]
        }, {
            "name": ["reference_pixel_location"],
            "version_id": ["1.0"],
            "local_identifier": ["reference_pixel_location"],
            "nillable_flag": ["false"],
            "submitter_name": ["M. Gordon"],
            "definition": ["The reference_pixel_location indicates the position\n                    of the pixel to which values in the containing class apply.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Center"],
                    "value_meaning": ["Values were determined for the intersection of a\n                               vector through the center of the field of view\n                               with the specified target.\n                "]
                }, {
                    "value": ["Upper Left Corner"],
                    "value_meaning": ["Values were determined for the intersection of a\n                               vector through the upper left corner of the field\n                               of view with the specified target.\n                "]
                }, {
                    "value": ["Lower Left Corner"],
                    "value_meaning": ["Values were determined for the intersection of a\n                               vector through the lower left corner of the field\n                               of view with the specified target.\n                "]
                }, {
                    "value": ["Upper Right Corner"],
                    "value_meaning": ["Values were determined for the intersection of a\n                               vector through the upper right corner of the field\n                               of view with the specified target.\n                "]
                }, {
                    "value": ["Lower Right Corner"],
                    "value_meaning": ["Values were determined for the intersection of a\n                               vector through the lower right corner of the field\n                               of view with the specified target.\n                "]
                }]
            }]
        }, {
            "name": ["spice_kernel_file_name"],
            "version_id": ["1.0"],
            "local_identifier": ["spice_kernel_file_name"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The spice_kernel_file_name attribute provides the file name of a SPICE\n          kernel file used to process the data or to produce geometric quantities given\n          in the label.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_File_Name"]
            }]
        }, {
            "name": ["kernel_provenance"],
            "version_id": ["1.0"],
            "local_identifier": ["kernel_provenance"],
            "nillable_flag": ["false"],
            "submitter_name": ["M. Gordon"],
            "definition": ["The kernel_provenance attribute indicates whether a kernel file is a\n        \tpredict kernel, a reconstructed kernel, some combination of the two, or\n        \ta kernel for which the distinction is not applicable.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Predicted"],
                    "value_meaning": ["This kernel is a predict kernel (e.g. a pre-encounter\n                \tpredicted spacecraft trajectory SPK ).\n                "]
                }, {
                    "value": ["Reconstructed"],
                    "value_meaning": ["This kernel is reconstructed based on improved information\n                \t(e.g. a post-encounter reconstructed spacecraft trajectory SPK based on\n                \timproved navigation information).\n                "]
                }, {
                    "value": ["Mixed"],
                    "value_meaning": ["This kernel contains both reconstructed and predicted portions\n                \t(e.g. a reconstructed spacecraft trajectory SPK with a run-out predicted tail).\n                "]
                }, {
                    "value": ["Provenance Not Applicable"],
                    "value_meaning": ["This kernel does not fit into any of the other categories\n                \t(e.g., LSKs, SCLKs, text PCKs).\n                "]
                }]
            }]
        }, {
            "name": ["vertical_coordinate_pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["vertical_coordinate_pixel"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["vertical_coordinate_pixel (line) is the vertical coordinate of a specific pixel.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Misc"]
            }]
        }, {
            "name": ["horizontal_coordinate_pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["horizontal_coordinate_pixel"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["horizontal_coordinate_pixel (sample) is the horizontal coordinate of a specific pixel.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Misc"]
            }]
        }, {
            "name": ["horizontal_display_axis"],
            "version_id": ["1.0"],
            "local_identifier": ["horizontal_display_axis"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The horizontal_display_axis attribute\n        identifies, by name, the axis of an Array (or Array subclass)\n        that is intended to be displayed in the horizontal or \"sample\"\n        dimension on a display device. The value of this attribute must\n        match the value of one, and only one, axis_name attribute in an\n        Axis_Array class of the associated Array.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["horizontal_display_direction"],
            "version_id": ["1.0"],
            "local_identifier": ["horizontal_display_direction"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The horizontal_display_direction attribute specifies the direction\n            across the screen of a display device that data along the horizontal axis of\n            an Array is supposed to be displayed.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Left to Right"],
                    "value_meaning": ["Data along the horizontal axis of an array should\n                \tbe displayed from left to right.\n                 "]
                }, {
                    "value": ["Right to Left"],
                    "value_meaning": ["Data along the horizontal axis of an array should\n                \tbe displayed from right to left.\n                "]
                }]
            }]
        }, {
            "name": ["vertical_display_axis"],
            "version_id": ["1.0"],
            "local_identifier": ["vertical_display_axis"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The vertical_display_axis attribute\n        identifies, by name, the axis of an Array (or Array subclass)\n        that is intended to be displayed in the vertical or \"line\"\n        dimension on a display device. The value of this attribute must\n        match the value of one, and only one, axis_name attribute in an\n        Axis_Array class of the associated Array.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["vertical_display_direction"],
            "version_id": ["1.0"],
            "local_identifier": ["vertical_display_direction"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The vertical_display_direction attribute specifies the direction\n            along the screen of a display device that data along the vertical axis\n            of an Array is supposed to be displayed.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Top to Bottom"],
                    "value_meaning": ["Data along the vertical axis of an array should\n                \tbe displayed from the top to the bottom of the display device.\n                 "]
                }, {
                    "value": ["Bottom to Top"],
                    "value_meaning": ["Data along the vertical axis of an array should\n                \tbe displayed from the bottom to the top of the display device.\n                "]
                }]
            }]
        }, {
            "name": ["north_azimuth"],
            "version_id": ["2.0"],
            "local_identifier": ["north_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Assuming the image is displayed as defined by the Display_Direction\n                    class, the north_azimuth attribute provides the value of the angle\n                    between a line from the image center to the north pole and\n                    a reference line in the image plane.  The reference line is\n                    a horizontal line from the image center to the middle right\n                    edge of the image. This angle is measured from the\n                    reference line and increases in a clockwise direction.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["east_azimuth"],
            "version_id": ["2.0"],
            "local_identifier": ["east_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Assuming the image is displayed as defined by the Display_Direction\n                    class, the east_azimuth attribute provides the value of the angle\n                  between a line from the image center to the east and a reference\n                  line in the image plane. The reference line is a horizontal line\n                  from the image center to the middle right edge of the image. This angle\n                  is measured from the reference line and increases in a clockwise direction.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["right_ascension_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["right_ascension_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The right_ascension_angle attribute provides the value of right\n            ascension (RA) as an angle. Right ascension is measured from the vernal\n            equinox or the first point of Aries, which is the place on the celestial\n            sphere where the Sun crosses the celestial equator from south to north at\n            the March equinox. Right ascension is measured continuously in a full circle\n            from that equinox towards the east. Right ascension is used in conjunction\n            with the declination attribute to specify a point on the sky. Note Right\n            Ascension also may be given in hour angles in which case the appropriate\n            attribute is right_ascension_hour_angle.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["right_ascension_hour_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["right_ascension_hour_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The right_ascension_hour_angle attribute provides the value of right\n            ascension (RA) as in terms of hour angles (hh.xxx...). Right ascension\n            is measured from the vernal equinox or the first point of Aries, which is the\n            place on the celestial sphere where the Sun crosses the celestial equator from\n            south to north at the March equinox. Right ascension is measured continuously\n            in a full circle from that equinox towards the east. Right ascension is used in\n            conjunction with the declination attribute to specify a point on the sky.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Time"],
                "specified_unit_id": ["hr"]
            }]
        }, {
            "name": ["declination_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["declination_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The declination_angle (Dec) attribute provides the value of an angle\n                      on the celestial sphere, measured north from the celestial equator\n                    to the point in question. (For points south of the celestial\n                    equator, negative values are used.) Declination is used in\n                    conjunction with right ascension (right_ascension_angle or\n                    right_ascension_hour_angle) to specify a point on the sky.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["celestial_north_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["celestial_north_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The celestial_north_clock_angle attribute specifies the\n                    direction of celestial north at the center of an image.\n                    It is measured from the 'upward' direction, clockwise to\n                    the direction toward celestial north, assuming\n                    the image is displayed as defined by the Display_Direction class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["celestial_east_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["celestial_east_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The celestial_east_clock_angle attribute specifies the\n                    direction of celestial east at the center of an image.\n                    It is measured from the 'upward' direction, clockwise to\n                    the direction toward celestial east, assuming\n                    the image is displayed as defined by the Display_Direction class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["ecliptic_north_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["ecliptic_north_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The ecliptic_north_clock_angle attribute specifies the\n                    direction of ecliptic north at the center of an image.\n                    It is measured from the 'upward' direction, clockwise to\n                    the direction toward ecliptic north, assuming\n                    the image is displayed as defined by the Display_Direction class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["ecliptic_east_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["ecliptic_east_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The ecliptic_east_clock_angle attribute specifies the\n                    direction of ecliptic east at the center of an image.\n                    It is measured from the 'upward' direction, clockwise to\n                    the direction toward ecliptic east, assuming\n                    the image is displayed as defined by the Display_Direction class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["sun_direction_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["sun_direction_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The sun_direction_clock_angle attribute specifies the\n                    direction of the sun as an angle measured from a line 'upward'\n                    from the center of the field of view, clockwise to\n                    the direction toward sun, assuming\n                    the image is displayed as defined by the Display_Direction class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["central_body_positive_pole_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["central_body_positive_pole_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The central_body_positive_pole_clock_angle element specifies\n            the direction of the central body's rotation axis in an image. It is\n            measured from the 'upward' direction in the image, clockwise to the direction of\n            the positive rotational pole as projected into the image plane, assuming\n            the image is displayed as defined by the Display_Direction class.\n            The positive pole is defined as the pole toward which the thumb points when the\n            fingers of the right hand are curled in the body's direction of rotation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["target_positive_pole_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["target_positive_pole_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The target_positive_pole_clock_angle element specifies\n            the direction of the target body's rotation axis in an image. It is\n            measured from the 'upward' direction in the image, clockwise to the direction of\n            the positive rotational pole as projected into the image plane, assuming\n            the image is displayed as defined by the Display_Direction class.\n            The positive pole is defined as the pole toward which the thumb points when the\n            fingers of the right hand are curled in the body's direction of rotation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["target_north_pole_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["target_north_pole_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The target_north_pole_clock_angle element specifies\n            the direction of the target body's rotation axis in an image. It is\n            measured from the 'upward' direction in the image, clockwise to the direction of\n            the northern rotational pole as projected into the image plane, assuming\n            the image is displayed as defined by the Display_Direction class.\n            The north pole of a planet or any of its satellites in the solar system is\n            the pole of the rotation axis that is in the same celestial hemisphere\n            relative to the invariable plane of the solar system as Earth's North pole.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["central_body_north_pole_clock_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["central_body_north_pole_clock_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The central_body_north_pole_clock_angle element specifies\n            the direction of the central body's (e.g., planet's)rotation axis in an image. It is\n            measured from the 'upward' direction in the image, clockwise to the direction of\n            the northern rotational pole as projected into the image plane, assuming\n            the image is displayed as defined by the Display_Direction class.\n            The north pole of a planet or any of its satellites in the solar system is\n            the pole of the rotation axis that is in the same celestial hemisphere\n            relative to the invariable plane of the solar system as Earth's North pole.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["qcos"],
            "version_id": ["1.0"],
            "local_identifier": ["qcos"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["qcos is the scalar component of a quaternion.\n        qcos = cos(theta/2), where theta is the angle of rotation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["qsin1"],
            "version_id": ["1.0"],
            "local_identifier": ["qsin1"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["qsin1 is the first element of the vector component\n          of a quaternion. qsin1 = x*sin(theta/2) where theta is the angle of\n          rotation and (x,y,z) is the unit vector around which the rotation occurs.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["qsin2"],
            "version_id": ["1.0"],
            "local_identifier": ["qsin2"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["qsin2 is the second element of the vector component\n          of a quaternion. qsin2 = y*sin(theta/2) where theta is the angle of\n          rotation and (x,y,z) is the unit vector around which the rotation occurs.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["qsin3"],
            "version_id": ["1.0"],
            "local_identifier": ["qsin3"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["qsin3 is the third element of the vector component\n          of a quaternion. qsin3 = z*sin(theta/2) where theta is the angle of\n          rotation and (x,y,z) is the unit vector around which the rotation occurs.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["rotation_direction"],
            "version_id": ["1.0"],
            "local_identifier": ["rotation_direction"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The rotation_direction attribute identifies the\n          direction of the rotation for a specific quaternion. This is\n          used when the two frames involved are unambiguously identifed\n          in the enclosing classes.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["Present to Reference"],
                    "value_meaning": ["The quaternion rotates the frame identifed by\n                  Coordinate_Space_Present to the frame identified by\n                  Coordinate_Space_Reference.\n                 "]
                }, {
                    "value": ["Reference to Present"],
                    "value_meaning": ["The quaternion rotates the frame identifed by\n                  Coordinate_Space_Reference to the frame identified by\n                  Coordinate_Space_Present.\n                "]
                }, {
                    "value": ["Forward"],
                    "value_meaning": ["Reference frames are generally defined sequentially\n                  from a base reference frame (e.g., base frames might be ICRF, IAU\n                  Mars, or the landing site from which a rover begins its exploration).\n                  rotation_direction = Forward corresponds to rotation in the 'direction'\n                  from the base frame.\n                "]
                }, {
                    "value": ["Reverse"],
                    "value_meaning": ["Reference frames are generally defined sequentially\n                  from a base reference frame (e.g., base frames might be ICRF, IAU\n                  Mars, or the landing site from which a rover begins its exploration).\n                  rotation_direction = Reverse corresponds to rotation toward the base frame.\n                "]
                }, {
                    "value": ["From Base"],
                    "value_meaning": ["Reference frames are generally defined sequentially\n                  from a base reference frame (e.g., base frames might be ICRF, IAU\n                  Mars, or the landing site from which a rover begins its exploration).\n                  rotation_direction = Away From Base corresponds to rotation in the 'direction'\n                  from the base frame.\n                "]
                }, {
                    "value": ["Toward Base"],
                    "value_meaning": ["Reference frames are generally defined sequentially\n                  from a base reference frame (e.g., base frames might be ICRF, IAU\n                  Mars, or the landing site from which a rover begins its exploration).\n                  rotation_direction = Toward Base corresponds to rotation toward the base frame.\n                "]
                }]
            }]
        }, {
            "name": ["horizontal_pixel_field_of_view"],
            "version_id": ["1.0"],
            "local_identifier": ["horizontal_pixel_field_of_view"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The horizontal_pixel_field_of_view provides the angular measure of\n      the horizontal field of view of a single pixel, and is sometimes referred to as\n      the instantaneous field of view. The pixel_field_of_view_method attribute will\n      designate the method used to determine this value. If the pixel_field_of_view_method\n      attribute is not specified, see the camera documentation for more details.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["vertical_pixel_field_of_view"],
            "version_id": ["1.0"],
            "local_identifier": ["vertical_pixel_field_of_view"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The vertical_pixel_field_of_view provides the angular measure of\n      the vertical field of view of a single pixel, and is sometimes referred to as\n      the instantaneous field of view. The pixel_field_of_view_method attribute will\n      designate the method used to determine this value. If the pixel_field_of_view_method\n      attribute is not specified, see the camera documentation for more details.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["pixel_field_of_view_method"],
            "version_id": ["1.0"],
            "local_identifier": ["pixel_field_of_view_method"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The pixel_field_of_view_method provides the method used\n          to get the values of the horizontal/vertical_pixel_field_view attributes. If the pixel\n          field of view does not vary across the camera field of view, then this value is 'constant'.\n          If the pixel field of view does vary across the camera field of view, the pixel field of\n          view can be determined either by the center pixel of the camera or the average field of view\n          of the pixel. See the camera documentation for more details.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "unit_of_measure_type": ["Units_of_None"],
                "DD_Permissible_Value": [{
                    "value": ["Constant"],
                    "value_meaning": ["Pixel field of view does not vary across the camera field of view"]
                }, {
                    "value": ["Central Pixel"],
                    "value_meaning": ["Pixel field of view varies across the camera field of view and represents\n                the FOV of the central pixel of the camera"]
                }, {
                    "value": ["Average"],
                    "value_meaning": ["Pixel field of view varies across the camera field of view and represents\n                the average FOV of the pixel"]
                }]
            }]
        }, {
            "name": ["horizontal_pixel_footprint"],
            "version_id": ["1.0"],
            "local_identifier": ["horizontal_pixel_footprint"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The horizontal_pixel_footprint provides the\n            the size of the horizontal field of view of a single pixel projected onto\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["vertical_pixel_footprint"],
            "version_id": ["1.0"],
            "local_identifier": ["vertical_pixel_footprint"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The vertical_pixel_footprint provides the size of\n            the vertical field of view of a single pixel projected onto\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["pixel_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["pixel_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The pixel_latitude attribute gives the value\n            of the planetocentric latitude on the target of the\n            projection of a specified pixel.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["pixel_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["pixel_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The pixel_longitude attribute gives the value\n            of the planetocentric longitude on the target of the\n            projection of a specified pixel.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subsolar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["subsolar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The subsolar_azimuth attribute provides the value of the\n            angle between the line from the center of an image to the\n            subsolar point on the target and a horizontal reference line (in the\n            image plane) extending from the image center to the middle right edge of the image.\n            The values of this angle increase in a clockwise direction.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subsolar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subsolar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subsolar_azimuth attribute identifies the value of\n        \tthe subsolar azimuth at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subsolar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subsolar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subsolar_azimuth attribute identifies the value of\n        \tthe subsolar azimuth at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subsolar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subsolar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subsolar_azimuth attribute identifies the initial\n        \tend of the range of values for subsolar azimuth in an image.\n        \tNote that since subsolar azimuth has values in [0,360], if\n        \tthe range in the image crosses the horizontal reference corresponding\n        \tto zero, the value of minimum_subsolar_azimuth will be greater than\n        \tthe value of the maximum_subsolar_azimuth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subsolar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subsolar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subsolar_azimuth attribute identifies the final\n        \tend of the range of values for subsolar azimuth in an image.\n        \tNote that since subsolar azimuth has values in [0,360], if\n        \tthe range in the image crosses the horizontal reference corresponding\n        \tto zero, the value of minimum_subsolar_azimuth will be greater than\n        \tthe value of the maximum_subsolar_azimuth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subsolar_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["subsolar_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The subsolar_latitude attribute gives the value\n            of the planetocentric latitude at the subsolar point on the target.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subsolar_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subsolar_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subsolar_latitude attribute identifies the value of\n        \tthe subsolar latitude at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subsolar_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subsolar_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subsolar_latitude attribute identifies the value of\n        \tthe subsolar latitude at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subsolar_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subsolar_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subsolar_latitude attribute identifies the initial\n        \tend of the range of values for subsolar latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subsolar_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subsolar_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subsolar_latitude attribute identifies the final\n        \tend of the range of values for subsolar latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subsolar_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["subsolar_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The subsolar_longitude attribute gives the value\n            of the planetocentric longitude at the subsolar point on the target.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subsolar_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subsolar_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subsolar_longitude attribute identifies the value of\n        \tthe subsolar longitude at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subsolar_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subsolar_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subsolar_longitude attribute identifies the value of\n        \tthe subsolar longitude at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subsolar_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subsolar_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subsolar_longitude attribute identifies the initial\n        \tend of the range of values for subsolar longitude.\n        \tNote that since subsolar longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_subsolar_longitude will be greater than the value of the\n        \tmaximum_subsolar_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subsolar_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subsolar_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subsolar_longitude attribute identifies the final\n        \tend of the range of values for subsolar longitude in an image.\n        \tNote that since subsolar longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_subsolar_longitude will be greater than the value of the\n        \tmaximum_subsolar_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subspacecraft_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["subspacecraft_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The subspacecraft_azimuth attribute provides the value of the\n            angle between the line from the center of an image to the\n            subspacecraft point on the target and a horizontal reference line (in the\n            image plane) extending from the image center to the middle right edge of the image.\n            The values of this angle increase in a clockwise direction.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subspacecraft_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subspacecraft_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subspacecraft_azimuth attribute identifies the value of\n        \tthe subspacecraft azimuth at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subspacecraft_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subspacecraft_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subspacecraft_azimuth attribute identifies the value of\n        \tthe subspacecraft azimuth at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subspacecraft_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subspacecraft_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subspacecraft_azimuth attribute identifies the initial\n        \tend of the range of values for subspacecraft azimuth in an image.\n        \tNote that since subspacecraft azimuth has values in [0,360], if\n        \tthe range in the image crosses the horizontal reference corresponding\n        \tto zero, the value of minimum_subspacecraft_azimuth will be greater than\n        \tthe value of the maximum_subspacecraft_azimuth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subspacecraft_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subspacecraft_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subspacecraft_azimuth attribute identifies the final\n        \tend of the range of values for subspacecraft azimuth in an image.\n        \tNote that since subspacecraft azimuth has values in [0,360], if\n        \tthe range in the image crosses the horizontal reference corresponding\n        \tto zero, the value of minimum_subspacecraft_azimuth will be greater than\n        \tthe value of the maximum_subspacecraft_azimuth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subspacecraft_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["subspacecraft_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The subspacecraft_latitude attribute gives the value\n            of the planetocentric latitude at the subspacecraft point on the target.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subspacecraft_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subspacecraft_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subspacecraft_latitude attribute identifies the value of\n        \tthe subspacecraft latitude at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subspacecraft_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subspacecraft_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subspacecraft_latitude attribute identifies the value of\n        \tthe subspacecraft latitude at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subspacecraft_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subspacecraft_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subspacecraft_latitude attribute identifies the initial\n        \tend of the range of values for subspacecraft latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subspacecraft_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subspacecraft_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subspacecraft_latitude attribute identifies the final\n        \tend of the range of values for subspacecraft latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["subspacecraft_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["subspacecraft_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The subspacecraft_longitude attribute gives the value\n            of the planetocentric longitude at the subspacecraft point on the target.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_subspacecraft_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_subspacecraft_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_subspacecraft_longitude attribute identifies the value of\n        \tthe subspacecraft longitude at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_subspacecraft_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_subspacecraft_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_subspacecraft_longitude attribute identifies the value of\n        \tthe subspacecraft longitude at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_subspacecraft_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_subspacecraft_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_subspacecraft_longitude attribute identifies the initial\n        \tend of the range of values for subspacecraft longitude.\n        \tNote that since subspacecraft longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_subspacecraft_longitude will be greater than the value of the\n        \tmaximum_subspacecraft_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_subspacecraft_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_subspacecraft_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_subspacecraft_longitude attribute identifies the final\n        \tend of the range of values for subspacecraft longitude in an image.\n        \tNote that since subspacecraft longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_subspacecraft_longitude will be greater than the value of the\n        \tmaximum_subspacecraft_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["lat_long_method"],
            "version_id": ["1.0"],
            "local_identifier": ["lat_long_method"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell Gordon"],
            "definition": ["The lat_long_method is used with the attributes start_latitude, stop_latitude,\n        \tstart_longitude and stop_longitude. For most observations these parameters would be multivalued.\n        \tlat_long_method is used to characterize the start and stop latitude and longitude. The\n        \tpossible values are: 'center' indicating the latitude and longitude values are those at\n        \tthe center of the field of view at the beginning and end of the observation. 'median'\n        \tindicating the latitude and longitude values are the median values at the beginning and\n        \tend of the observation. 'mean' indicating the latitude and longitude values are the mean\n        \tvalues at the beginning and end of the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "unit_of_measure_type": ["Units_of_None"],
                "DD_Permissible_Value": [{
                    "value": ["Center"],
                    "value_meaning": ["The latitude and longitude values given using start_ and stop_ latitude and longitude\n            \tare those at the center of the field of view at the beginning and end of the observation.\n            "]
                }, {
                    "value": ["Median"],
                    "value_meaning": ["The latitude and longitude values given using start_ and stop_ latitude and longitude\n            \tare the median values at the beginning and end of the observation.\n            "]
                }, {
                    "value": ["Mean"],
                    "value_meaning": ["The latitude and longitude values given using start_ and stop_ latitude and longitude\n            \tare the mean values at the beginning and end of the observation.\n            "]
                }]
            }]
        }, {
            "name": ["start_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_latitude attribute identifies the value of\n        \tthe Planetocentric latitude at the beginning of the observation\n        \t(geometry_start_time_utc). When either start_latitude or stop_latitude\n        \tis used, both must be used. In addition the attribute\n        \tlat_long_method must be used.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_latitude attribute identifies the value of\n        \tthe Planetocentric latitude at the end of the observation\n        \t(geometry_stop_time_utc). When either start_latitude or stop_latitude\n        \tis used, both must be used. In addition the attribute\n        \tlat_long_method must be used.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_latitude attribute identifies the initial\n        \tend of the range of values for Planetocentric latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_latitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_latitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_latitude attribute identifies the final\n        \tend of the range of values for Planetocentric latitude in an image.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["start_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_longitude attribute identifies the value of\n        \tthe Planetocentric longitude at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_longitude attribute identifies the value of\n        \tthe Planetocentric longitude at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_longitude attribute identifies the initial\n        \tend of the range of values for Planetocentric longitude.\n        \tNote that since Planetocentric longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_longitude will be greater than the value of the maximum_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_longitude"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_longitude"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_longitude attribute identifies the final\n        \tend of the range of values for Planetocentric longitude in an image.\n        \tNote that since Planetocentric longitude has values in [0,360], if\n        \tthe range in the product crosses the prime meridian, the value of\n        \tminimum_longitude will be greater than the value of the maximum_longitude.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["calibration_source_id"],
            "version_id": ["1.0"],
            "local_identifier": ["calibration_source_id"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The calibration_source_id is used to identify the source used\n            in calibrating the instrument.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["c0"],
            "version_id": ["1.0"],
            "local_identifier": ["c0"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The first coefficient of a polynomial.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["c1"],
            "version_id": ["1.0"],
            "local_identifier": ["c1"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The second coefficient of a polynomial.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["c2"],
            "version_id": ["1.0"],
            "local_identifier": ["c2"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The third coefficient of a polynomial.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["device_id"],
            "version_id": ["1.0"],
            "local_identifier": ["device_id"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The device_id attribute specifies the abbreviated\n          identification of an articulation device.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["device_mode"],
            "version_id": ["1.0"],
            "local_identifier": ["device_mode"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The device_mode attribute specifies the deployment state\n            (i.e., physical configuration) of an articulation device at the time of data\n            acquisition. Examples include 'Arm Vibe', 'Deployed', 'Free Space', 'Stowed'.\n            Note: the value set for this attribute is mission-specific and should be declared\n            in a mission-specific dictionary.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["device_phase"],
            "version_id": ["1.0"],
            "local_identifier": ["device_phase"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The device_phase attribute specifies the current phase of the mission,\n          from an articulation-device-centric point of view.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["device_name"],
            "version_id": ["1.0"],
            "local_identifier": ["device_name"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The device_name attribute specifies the common\n          name of an articulation device.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["selected_instrument_id"],
            "version_id": ["1.0"],
            "local_identifier": ["selected_instrument_id"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The selected_instrument_id attribute specifies an abbreviated name or acronym\n        \tthat identifies the selected instrument mounted on the articulation device.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["model_type"],
            "version_id": ["1.0"],
            "local_identifier": ["model_type"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The model_type attribute specifies an identifier for the\n          type or kind of model. The value should be one of a well defined set,\n          providing an application program with sufficient information to know\n          how to handle the rest of the parameters within the model. This\n          value will correlate directly with the specific camera model class\n          that is a subclass of the Camera_Model_Parameters class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["solution_id"],
            "version_id": ["1.0"],
            "local_identifier": ["solution_id"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The solution_id attribute specifies the unique identifier\n          for the solution set to which the values in the group belong. For\n          certain kinds of information, such as pointing correction (pointing\n          models) and rover localization (coordinate system definitions), the\n          \"true\" value is unknown and only estimates of the true value exist.\n          Thus, more than one set of estimates may exist simultaneously, each\n          valid for its intended purpose. Each of these sets is called a\n          \"solution\" to the unknown true value. The solution_id attribute is\n          used to identify which solution is being expressed by the containing\n          group. No specific naming convention is defined here, however it is\n          recommended that projects adopt one. The intent is to be able to\n          identify who created the solution, and why. Possible components of\n          the naming convention include user, institution, purpose, request ID,\n          version, program, date/time.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["coordinate_space_frame_type"],
            "version_id": ["1.0"],
            "local_identifier": ["coordinate_space_frame_type"],
            "nillable_flag": ["true"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The coordinate_space_frame_type attribute identifies the type of frame being\n            described, such as SITE, LOCAL_LEVEL, LANDER, ROVER, ARM, etc.  When combined with\n            Coordinate_Space_Index and the optional solution_id in the Coordinate_Space_Indexed class,\n            this serves to fully name an instance of a coordinate space.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["index_sequence_number"],
            "version_id": ["1.0"],
            "local_identifier": ["index_sequence_number"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_sequence_number attribute supplies the sequence\n          identifier for the associated value in a group of related values.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["index_name"],
            "version_id": ["1.0"],
            "local_identifier": ["index_name"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_name attribute supplies the formal name\n          for the associated value in a group of related values.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["index_id"],
            "version_id": ["1.0"],
            "local_identifier": ["index_id"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_id attribute supplies a short name (identifier)\n          for the associated value in a group of related values.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["index_value_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["index_value_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_value_angle attribute provides the value\n          of an angle as named by the associated index_id, index_name,\n          or index_sequence_number.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Angle"]
            }]
        }, {
            "name": ["index_value_length"],
            "version_id": ["1.0"],
            "local_identifier": ["index_value_length"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_value_length attribute provides the value\n          of a length as named by the associated index_id or index_name.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["index_value_number"],
            "version_id": ["1.0"],
            "local_identifier": ["index_value_number"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_value_number attribute provides the value with\n          no applicable units as named by the associated index_id or index_name.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_None"]
            }]
        }, {
            "name": ["index_value_string"],
            "version_id": ["1.0"],
            "local_identifier": ["index_value_string"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_value attribute provides the string value as\n          named by the associated index_id or index_name.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Short_String_Collapsed"]
            }]
        }, {
            "name": ["index_value_temperature"],
            "version_id": ["1.0"],
            "local_identifier": ["index_value_temperature"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The index_value_temperature attribute provides the value\n          of a temperature as named by the associated index_id or index_name.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Temperature"]
            }]
        }, {
            "name": ["positive_azimuth_direction"],
            "version_id": ["1.0"],
            "local_identifier": ["positive_azimuth_direction"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The positive_azimuth_direction attribute specifies the direction in which\n            azimuth is measured in positive degrees for an observer on the surface of a body.\n            The azimuth is measured with respect to the elevation reference plane. A value of\n            'clockwise' indicates that azimuth is measured positively clockwise, and\n            'counterclockwise' indicates that azimuth increases positively counter-clockwise.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "unit_of_measure_type": ["Units_of_None"],
                "DD_Permissible_Value": [{
                    "value": ["Clockwise"],
                    "value_meaning": ["Indicates that azimuth is measured positively Clockwise."]
                }, {
                    "value": ["Counterclockwise"],
                    "value_meaning": ["Indicates that azimuth is measured positively Counter-clockwise."]
                }, {
                    "value": ["CW"],
                    "value_meaning": ["Indicates that azimuth is measured positively Clockwise."]
                }, {
                    "value": ["CCW"],
                    "value_meaning": ["Indicates that azimuth is measured positively Counter-clockwise."]
                }]
            }]
        }, {
            "name": ["positive_elevation_direction"],
            "version_id": ["1.0"],
            "local_identifier": ["positive_elevation_direction"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The positive_elevation_direction attribute provides the direction in which elevation is\n          measured in positive degrees for an observer on the surface of a body. The elevation is measured\n          with respect to the azimuthal reference plane. A value of UP or ZENITH indicates that elevation is\n          measured positively upwards, i.e., the zenith point would be at +90 degrees and the nadir point at\n          -90 degrees. DOWN or NADIR indicates that the elevation is measured positively downwards; the\n          zenith point would be at -90 degrees and the nadir point at +90 degrees.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "unit_of_measure_type": ["Units_of_None"],
                "DD_Permissible_Value": [{
                    "value": ["Up"],
                    "value_meaning": ["Indicates that elevation is measured positively upwards, i.e., the zenith point would\n              be at +90 degrees and the nadir point at -90 degrees."]
                }, {
                    "value": ["Zenith"],
                    "value_meaning": ["Indicates that elevation is measured positively upwards, i.e., the zenith point would\n              be at +90 degrees and the nadir point at -90 degrees."]
                }, {
                    "value": ["Down"],
                    "value_meaning": ["Indicates that the elevation is measured positively downwards, i.e. the\n              zenith point would be at -90 degrees and the nadir point at +90 degrees."]
                }, {
                    "value": ["Nadir"],
                    "value_meaning": ["Indicates that the elevation is measured positively downwards, i.e. the\n              zenith point would be at -90 degrees and the nadir point at +90 degrees."]
                }]
            }]
        }, {
            "name": ["emission_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["emission_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The emission_angle element provides the value of the angle between the surface\n            normal vector at the intercept point and a vector from the intercept point to the\n            spacecraft. The emission_angle varies from 0 degrees when the spacecraft is viewing the\n            subspacecraft point (nadir viewing) to 90 degrees when the intercept is tangent to the\n            surface of the target body. Thus, higher values of emission_angle indicate more oblique\n            viewing of the target. Values in the range of 90 to 180 degrees are possible for ring data.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_emission_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_emission_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_emission_angle attribute provides the smallest\n            value during the observation for the emission angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_emission_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_emission_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_emission_angle element provides the largest\n            value during the observation for the emission angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_emission_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["start_emission_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_emission_angle attribute provides the value\n            at the beginning of the observation (geometry_start_time_utc) for\n            the emission angle at the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_emission_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_emission_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_emission_angle attribute provides the value\n            at the end of the observation (geometry_stop_time_utc) for\n            the emission angle at the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["incidence_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["incidence_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The incidence_angle element provides a measure of the lighting condition at\n            the intercept point. Incidence angle is the angle between the local vertical at the\n            intercept point (surface) and a vector from the intercept point to the sun. The incidence_angle\n            varies from 0 degrees when the intercept point coincides with the subsolar point to 90 degrees\n            when the intercept point is at the terminator (i.e., in the shadowed or dark portion of\n            the target body). Thus, higher values of incidence_angle indicate the existence of a greater\n            number of surface shadows. Note: for Magellan altimetry and radiometry products, and for\n            Lunar Reconnaissance Orbiter Mini-RF products, incidence_angle is defined as the value of\n            the angle between the local vertical and the spacecraft direction.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_incidence_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_incidence_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_incidence_angle attribute provides the smallest\n            value during the observation for the incidence angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_incidence_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_incidence_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_incidence_angle element provides the largest\n            value during the observation for the incidence angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_incidence_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["start_incidence_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_incidence_angle attribute provides the value\n            at the beginning of the observation (geometry_start_time_utc) for\n            the incidence angle at the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_incidence_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_incidence_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_incidence_angle attribute provides the value\n            at the end of the observation (geometry_stop_time_utc) for\n            the incidence angle at the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["phase_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["phase_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The phase_angle element provides a measure of the relationship between\n            the instrument viewing position and incident illumination (such as solar\n            light). Phase angle is measured at the target; it is the angle between\n            a vector to the illumination source and a vector to the instrument. If\n            not specfied, the target is assumed to be at the center of the instrument\n            field of view. If illumination is from behind the instrument, phase_angle will be small.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_phase_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_phase_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_phase_angle attribute provides the smallest\n            value during the observation for the phase angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_phase_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_phase_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_phase_angle element provides the largest\n            value during the observation for the phase angle at the target\n            specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_phase_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["start_phase_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_phase_angle attribute provides the value\n            at the beginning of the observation (geometry_start_time_utc) for\n            the phase angle at the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_phase_angle"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_phase_angle"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_phase_angle attribute provides the value\n            at the end of the observation (geometry_stop_time_utc) for\n            the phase angle at the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["solar_elongation"],
            "version_id": ["1.0"],
            "local_identifier": ["solar_elongation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The solar_elongation element gives the angle between the\n           line of sight of observation and the direction of the Sun.\n           Note: For IRAS: The line of sight of observation is the\n           boresight of the telescope as measured by the satellite sun sensor.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["minimum_solar_elongation"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_solar_elongation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_solar_elongation attribute provides the smallest\n            value during the observation for the solar elongation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["maximum_solar_elongation"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_solar_elongation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_solar_elongation element provides the largest\n            value during the observation for the solar elongation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_solar_elongation"],
            "version_id": ["1.0"],
            "local_identifier": ["start_solar_elongation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_solar_elongation attribute provides the value\n            at the beginning of the observation (geometry_start_time_utc) for\n            the solar elongation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_solar_elongation"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_solar_elongation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_solar_elongation attribute provides the value\n            at the end of the observation (geometry_stop_time_utc) for\n            the solar elongation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["180"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["distance"],
            "version_id": ["1.0"],
            "local_identifier": ["distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The distance attribute provides the scalar distance\n                    between to objects or points.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["target_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["target_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The target_geocentric_distance attribute provides the scalar distance\n            between the center of the target and the center of the Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_target_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_target_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_target_geocentric_distance attribute provides\n            the smallest value for the distance between the center of the\n            target and the center of the Earth during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_target_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_target_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_target_geocentric_distance attribute provides\n            the largest value for the distance between the center of the\n            target and the center of the Earth during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_target_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_target_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_target_geocentric_distance attribute provides\n            the scalar distance between the center of the target and the center of\n            the Earth at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_target_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_target_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_target_geocentric_distance attribute provides\n            the scalar distance between the center of the target and the center of\n            the Earth at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["target_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["target_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The target_heliocentric_distance attribute provides\n            the scalar distance between the center of the target and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_target_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_target_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_target_heliocentric_distance attribute provides\n            the smallest value for the distance between the center of the\n            target and the center of the Sun during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_target_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_target_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_target_heliocentric_distance attribute provides\n            the largest value for the distance between the center of the\n            target and the center of the Sun during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_target_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_target_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_target_heliocentric_distance attribute provides\n            the scalar distance between the center of the target and the center of\n            the Sun at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_target_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_target_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_target_heliocentric_distance attribute provides\n            the scalar distance between the center of the target and the center of\n            the Sun at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["target_ssb_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["target_ssb_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The target_ssb_distance attribute provides the scalar distance between\n            the center of the target and the Solar System Barycenter.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_target_ssb_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_target_ssb_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_target_ssb_distance attribute provides\n            the smallest value for the distance between the center of the\n            target and the Solar System Barycenter during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_target_ssb_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_target_ssb_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_target_ssb_distance attribute provides\n            the largest value for the distance between the center of the\n            target and the Solar System Barycenter during the observation.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_target_ssb_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_target_ssb_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_target_ssb_distance attribute provides\n            the scalar distance between the center of the target and the\n            Solar System Barycenter at the beginning of the observation (geometry_start_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_target_ssb_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_target_ssb_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_target_ssb_distance attribute provides\n            the scalar distance between the center of the target and the\n            Solar System Barycenter at the end of the observation (geometry_stop_time_utc).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_target_center_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_target_center_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_target_center_distance attribute provides\n            the scalar distance between the spacecraft and the center\n            of the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_target_center_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_target_center_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_target_center_distance attribute provides\n            the smallest value during the observation for the distance between the spacecraft\n            and the center of the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_target_center_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_target_center_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_target_center_distance attribute provides\n            the largest value during the observation for the distance between the spacecraft\n            and the center of the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_target_center_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_target_center_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_target_center_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the center of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_target_center_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_target_center_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_target_center_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the center of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_target_boresight_intercept_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_target_boresight_intercept_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_target_boresight_intercept_distance attribute provides\n            the scalar distance between the spacecraft and the boresight vector\n            intercept point on the surface of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_target_boresight_intercept_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_target_boresight_intercept_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_target_boresight_intercept_distance attribute provides\n            the smallest value during the observation for the distance between the spacecraft and\n            the boresight vector intercept point on the surface of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_target_boresight_intercept_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_target_boresight_intercept_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_target_boresight_intercept_distance attribute provides\n            the largest value during the observation for the distance between the spacecraft and\n            the boresight vector intercept point on the surface of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_target_boresight_intercept_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_target_boresight_intercept_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_target_boresight_intercept_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the boresight vector intercept point on the surface of\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_target_boresight_intercept_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_target_boresight_intercept_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_target_boresight_intercept_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the boresight vector intercept point on the surface of\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_target_subspacecraft_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_target_subspacecraft_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_target_subspacecraft_distance attribute provides\n            the scalar distance between the spacecraft and the subspacecraft point on the\n            surface of the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_target_subspacecraft_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_target_subspacecraft_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_target_subspacecraft_distance attribute provides\n            the smallest value during the observation for the distance between the spacecraft and\n            the subspacecraft point on the surface of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_target_subspacecraft_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_target_subspacecraft_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_target_subspacecraft_distance attribute provides\n            the largest value during the observation for the distance between the spacecraft and\n            the subspacecraft point on the surface of the target specified in the parent\n            Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_target_subspacecraft_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_target_subspacecraft_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_target_subspacecraft_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the subspacecraft point on the surface of\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_target_subspacecraft_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_target_subspacecraft_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_target_subspacecraft_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the subspacecraft point on the surface of\n            the target specified in the parent Geometry_Orbiter class.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_central_body_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_central_body_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_central_body_distance attribute provides the scalar distance\n            between the spacecraft and the center of the central body (e.g., the center of Mars\n            when opperating in the Mars system).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_central_body_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_central_body_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_central_body_distance attribute provides\n            the smallest value during the observation for the distance between the spacecraft and\n            the center of the central body (e.g., the center of Mars when opperating in the\n            Mars system).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_central_body_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_central_body_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_central_body_distance attribute provides\n            the largest value during the observation for the distance between the spacecraft and\n            the center of the central body (e.g., the center of Mars when opperating in the\n            Mars system).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_central_body_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_central_body_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_central_body_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the center of the central body (e.g., the center\n            of Mars when opperating in the Mars system).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_central_body_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_central_body_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_central_body_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the center of the central body (e.g., the center\n            of Mars when opperating in the Mars system).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_geocentric_distance attribute provides\n                    the scalar distance between the spacecraft and the center of Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_geocentric_distance attribute provides\n            the smallest value during the observation for the distance between the spacecraft and\n            the center of Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_geocentric_distance attribute provides\n            the largest value during the observation for the distance between the spacecraft and\n            the center of Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_geocentric_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the center of Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_geocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_geocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_geocentric_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the center of Earth.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["spacecraft_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["spacecraft_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The spacecraft_heliocentric_distance attribute provides the\n            scalar distance between the spacecraft and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["minimum_spacecraft_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["minimum_spacecraft_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The minimum_spacecraft_heliocentric_distance attribute provides\n            the smallest value during the observation for the distance between the\n            spacecraft and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["maximum_spacecraft_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["maximum_spacecraft_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The maximum_spacecraft_heliocentric_distance attribute provides\n            the largest value during the observation for the distance between the\n            spacecraft and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["start_spacecraft_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["start_spacecraft_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The start_spacecraft_heliocentric_distance attribute provides\n            the scalar distance at the beginning of the observation (geometry_start_time_utc)\n            between the spacecraft and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["stop_spacecraft_heliocentric_distance"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_spacecraft_heliocentric_distance"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The stop_spacecraft_heliocentric_distance attribute provides\n            the scalar distance at the end of the observation (geometry_stop_time_utc)\n            between the spacecraft and the center of the Sun.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["light_time_correction_applied"],
            "version_id": ["1.0"],
            "local_identifier": ["light_time_correction_applied"],
            "nillable_flag": ["true"],
            "submitter_name": ["Boris Semenov"],
            "definition": ["The light_time_correction_applied indicates whether or not light travel time\n            correction and stellar aberration correction were used when calculating the values\n            in the enclosing class. The attribute is nillable with nill_reason = unknown, but only\n            for migrated data. Note: generally, received light travel time is calculated unless\n            a transmitter (e.g., radar, radio) was involved in which the calculation typically is\n            transmitted light time.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Short_String_Collapsed"],
                "DD_Permissible_Value": [{
                    "value": ["None"],
                    "value_meaning": ["Neither light travel time nor stellar aberration was used when\n                  calculating the values in the enclosing class.\n                "]
                }, {
                    "value": ["Received_Light_Time"],
                    "value_meaning": ["Received light travel time, but not stellar aberration was used\n                  when calculating the values in the enclosing class.\n                "]
                }, {
                    "value": ["Received_Light_Time_Stellar_Abb"],
                    "value_meaning": ["Received light travel time and stellar aberration were used\n                  when calculating the values in the enclosing class.\n                "]
                }, {
                    "value": ["Transmitted_Light_Time"],
                    "value_meaning": ["Transmitted light travel time, but not stellar aberration was used\n                  when calculating the values in the enclosing class.\n                "]
                }, {
                    "value": ["Transmitted_Light_Time_Stellar_Abb"],
                    "value_meaning": ["Transmitted light travel time and stellar aberration were used\n                  when calculating the values in the enclosing class.\n                "]
                }]
            }]
        }, {
            "name": ["x_position"],
            "version_id": ["1.0"],
            "local_identifier": ["x_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The x component of a Cartesian position vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["y_position"],
            "version_id": ["1.0"],
            "local_identifier": ["y_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The y component of a Cartesian position vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["z_position"],
            "version_id": ["1.0"],
            "local_identifier": ["z_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The z component of a Cartesian position vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["x_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["x_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The x component of a Cartesian velocity vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Velocity"]
            }]
        }, {
            "name": ["y_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["y_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The y component of a Cartesian velocity vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Velocity"]
            }]
        }, {
            "name": ["z_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["z_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The z component of a Cartesian velocity vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Velocity"]
            }]
        }, {
            "name": ["x_acceleration"],
            "version_id": ["1.0"],
            "local_identifier": ["x_acceleration"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The x component of a Cartesian acceleration vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Acceleration"]
            }]
        }, {
            "name": ["y_acceleration"],
            "version_id": ["1.0"],
            "local_identifier": ["y_acceleration"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The y component of a Cartesian acceleration vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Acceleration"]
            }]
        }, {
            "name": ["z_acceleration"],
            "version_id": ["1.0"],
            "local_identifier": ["z_acceleration"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The z component of a Cartesian acceleration vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Acceleration"]
            }]
        }, {
            "name": ["x_pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["x_pixel"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The x component of a Cartesian pixel vector; typically used\n            in cameral models.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["y_pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["y_pixel"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The y component of a Cartesian pixel vector; typically used\n            in cameral models.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["z_pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["z_pixel"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The z component of a Cartesian pixel vector; typically used\n            in cameral models.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["x"],
            "version_id": ["1.0"],
            "local_identifier": ["x"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The x component of a Cartesian vector which has no units."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["y"],
            "version_id": ["1.0"],
            "local_identifier": ["y"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The y component of a Cartesian vector which has no units."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["z"],
            "version_id": ["1.0"],
            "local_identifier": ["z"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The z component of a Cartesian vector which has no units."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"]
            }]
        }, {
            "name": ["x_unit"],
            "version_id": ["1.0"],
            "local_identifier": ["x_unit"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The x component of a unit Cartesian vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-1"],
                "maximum_value": ["1"]
            }]
        }, {
            "name": ["y_unit"],
            "version_id": ["1.0"],
            "local_identifier": ["y_unit"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The y component of a unit Cartesian vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-1"],
                "maximum_value": ["1"]
            }]
        }, {
            "name": ["z_unit"],
            "version_id": ["1.0"],
            "local_identifier": ["z_unit"],
            "nillable_flag": ["false"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The z component of a unit Cartesian vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-1"],
                "maximum_value": ["1"]
            }]
        }, {
            "name": ["radius_position"],
            "version_id": ["1.0"],
            "local_identifier": ["radius_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The radial component of a spherical or cylindrical position vector\n                    (e.g., the radius coordinate in Planetocentric coordinates).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Length"]
            }]
        }, {
            "name": ["longitude_position"],
            "version_id": ["1.0"],
            "local_identifier": ["longitude_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The longitudinal component of a Planetocentric position vector.\n                    Planetocentric longitude is measured from the IAU approved prime\n                    meridian for the body and increases toward the east.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0"],
                "maximum_value": ["360"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["latitude_position"],
            "version_id": ["1.0"],
            "local_identifier": ["latitude_position"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The latitude component of a Planetocentric position vector. Planetocentric\n            latitude is the angle between the equator plane and a vector connecting the\n            point of interest and the origin of the coordinate system. Latitudes are defined\n            to be positive in the northern (as defined by the IAU) hemisphere.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90"],
                "maximum_value": ["90"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["radial_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["radial_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The radial component of a spherical or cylindrical velocity vector."],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Velocity"]
            }]
        }, {
            "name": ["longitude_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["longitude_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The longitudinal component of a Planetocentric velocity vector.\n                    Planetocentric longitude is measured from the IAU approved prime\n                    meridian for the body and increases toward the east.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Angular_Velocity"]
            }]
        }, {
            "name": ["latitude_velocity"],
            "version_id": ["1.0"],
            "local_identifier": ["latitude_velocity"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The latitude component of a Planetocentric velocity vector. Planetocentric\n            latitude is the angle between the equator plane and a vector connecting the point\n            of interest and the origin of the coordinate system. Latitudes are defined to be\n            positive in the northern (as defined by the IAU) hemisphere.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Angular_Velocity"]
            }]
        }, {
            "name": ["cahvore_model_type"],
            "version_id": ["1.0"],
            "local_identifier": ["cahvore_model_type"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The cahvore_model_type attribute indicates which variant of the CAHVORE model to\n          use. Type 1 is a perspective-projection model, similar to CAHV and CAHVOR except for the\n          moving entrance pupil. Type 2 is a fish-eye lens model reflecting fundamentally\n          different geometry. Type 3 is a generalization that includes the first two, and is used for most\n          fisheye-type lenses (see cahvore_model_parameter).\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["true"],
                "value_data_type": ["ASCII_Integer"],
                "unit_of_measure_type": ["Units_of_None"],
                "DD_Permissible_Value": [{
                    "value": ["1"],
                    "value_meaning": ["A perspective-projection model, similar to CAHV and\n              CAHVOR except for the moving entrance pupil"]
                }, {
                    "value": ["2"],
                    "value_meaning": ["A fish-eye lens model reflecting fundamentally different geometry"]
                }, {
                    "value": ["3"],
                    "value_meaning": ["A generalization that includes the first two, and is used for most\n              fisheye-type lenses"]
                }]
            }]
        }, {
            "name": ["cahvore_model_parameter"],
            "version_id": ["1.0"],
            "local_identifier": ["cahvore_model_parameter"],
            "nillable_flag": ["false"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The cahvore_parameter_type attribute is a scalar floating-point number used for\n            CAHVORE Type 3 models (see cahvore_model_type). If the parameter is 1.0, the model is\n            identical to type 1; if 0.0, it is identical to type 2. Most fish-eye lenses use a value\n            in between.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_None"]
            }]
        }, {
            "name": ["instrument_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["instrument_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The instrument_azimuth attribute specifies the value for an instrument's\n            rotation in the horizontal direction. It is usually measured from a low hard stop.\n            Although it may be used for any instrument where it makes sense, it is primarily\n            intended for use in surface-based instruments that measure pointing in terms of\n            azimuth and elevation. When in a group, defines the azimuth (horizontal rotation)\n            at which the instrument is pointed. This value is expressed using the coordinate system\n            referred to by Coordinate_Space_Reference class. The interpretation of exactly what\n            part of the instrument is being pointed is mission-specific. It could be the boresight,\n            the camera head direction, the CAHV camera model A vector direction, or any of a\n            number of other things. As such, for multimission use this value should be used\n            mostly as an approximation, e.g. identifying scenes which might contain a given object.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Angle"]
            }]
        }, {
            "name": ["instrument_elevation"],
            "version_id": ["1.0"],
            "local_identifier": ["instrument_elevation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The instrument_elevation attribute specifies the value for an instrument's\n            rotation in the vertical direction. It is usually measured from a low hard stop.\n            Although it may be used for any instrument where it makes sense, it is primarily\n            intended for use in surface-based instruments that measure pointing in terms of\n            azimuth and elevation. When in a group, defines the elevation (vertical rotation)\n            at which the instrument is pointed. This value is expressed using the coordinate system\n            referred to by Coordinate_Space_Reference class. The interpretation of exactly what part\n            of the instrument is being pointed is mission-specific. It could be the boresight, the\n            camera head direction, the CAHV camera model A vector direction, or any of a number of\n            other things. As such, for multimission use this value should be used mostly as an\n            approximation, e.g. identifying scenes that might contain a given object.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "unit_of_measure_type": ["Units_of_Angle"]
            }]
        }, {
            "name": ["solar_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["solar_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The solar_azimuth attribute specifies one of two angular measurements\n            indicating the direction to the Sun as measured from a specific point on the\n            surface of a planet (eg., from a lander or rover). The positive direction of the\n            elevation is set by the positive_azimuth_direction attribute in the reference\n            coordinate space. The azimuth is measured positively in the clockwise direction\n            (as viewed from above) with the meridian passing through the positive spin axis\n            of the planet (i.e., the north pole) defining the zero reference.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0.0"],
                "maximum_value": ["360.0"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["solar_elevation"],
            "version_id": ["1.0"],
            "local_identifier": ["solar_elevation"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The solar_elevation attribute specifies one of two angular measurements\n            indicating the direction to the Sun as measured from a specific point on the surface\n            of a planet (eg., from a lander or rover). The positive direction of the elevation\n            is set by the positive_elevation_direction attribute in the reference coordinate\n            space. The elevation is measured from the plane which is normal to the line passing\n            between the surface point and the planet's center of mass, and that intersects the surface point.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["-90.0"],
                "maximum_value": ["90.0"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["start_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["start_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The start_azimuth attribute specifies the angular distance from a fixed\n          reference position at which an image or observation starts. Azimuth is measured\n          in a spherical coordinate system, in a plane normal to the principal axis. Azimuth\n          values increase according to the right hand rule relative to the positive direction\n          of the principal axis of the spherical coordinate system. When applied to a site\n          or surface projection coordinate space, specifies the azimuth of the left edge of\n          the output map. Applies to Cylindrical and Cylindrical-Perspective projections only.\n      "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0.0"],
                "maximum_value": ["360.0"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }, {
            "name": ["stop_azimuth"],
            "version_id": ["1.0"],
            "local_identifier": ["stop_azimuth"],
            "nillable_flag": ["false"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The stop_azimuth attribute specifies the angular distance from a fixed\n            reference position at which an image or observation stops. Azimuth is measured\n            in a spherical coordinate system, in a plane normal to the principal axis. Azimuth\n            values increase according to the right hand rule relative to the positive direction\n            of the principal axis of the spherical coordinate system. When applied to a site or\n            surface projection coordinate space, specifies the azimuth of the right edge of the\n            output map. Applies to Cylindrical and Cylindrical-Perspective projections only.\n        "],
            "DD_Value_Domain": [{
                "enumeration_flag": ["false"],
                "value_data_type": ["ASCII_Real"],
                "minimum_value": ["0.0"],
                "maximum_value": ["360.0"],
                "unit_of_measure_type": ["Units_of_Angle"],
                "specified_unit_id": ["deg"]
            }]
        }],
        "DD_Class": [{
            "name": ["Body_Identification_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Body_Identification_Base"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Body_Identification_Base class provides multiple attributes\n            that can be used to identify a physical object (spacecraft, planet\n            instrument, transmitter, system barycenter, etc.). At least one must be used.\n        "],
            "abstract_flag": ["true"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["body_spice_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Frame_Identification_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Frame_Identification_Base"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Frame_Identification_Base class provides multiple attributes\n            that can be used to identify a reference frame. At least one must be used.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["frame_spice_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Central_Body_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Central_Body_Identification"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Central_Body_Identification class uniquely\n            identifies the body that is the central body associated\n            with an observation (e.g., Saturn for Saturn system observations).\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Body_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_System_Origin_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Coordinate_System_Origin_Identification"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Coordinate_System_Origin_Identification class uniquely identifies\n          the \"body\" that is the origin of a coordinate system. Typically body centered\n          coordinate systems place the origin at the center of mass of the body. In addition\n          to physical bodies, the origin may be defined at a point in space such as a system\n          barycenter. Note that the origin of coordinate system does not necessarily correspond\n          to either end point of a vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Body_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Observer_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Observer_Identification"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Within the Geometry dictionary context, an \"Observer\" is the body on\n            the \"from\" end of a vector, or other translation through space.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Body_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Reference_Frame_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Reference_Frame_Identification"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Reference_Frame_Identification class is\n            a base class for identifying reference frames.  These\n            are frames in the NAIF sense, i.e., three orthogonal\n            axes with a specified orientation, but without a fixed origin.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Frame_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Geometry_Target_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Geometry_Target_Identification"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The object to which the associated set of geometric parameters\n        \t  are given. Within the Geometry dictionary context, a \"Target\" is the body\n        \t  on the \"to\" end of a vector, or other translation through space.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Body_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_Index"],
            "version_id": ["2.0"],
            "local_identifier": ["Coordinate_Space_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Identifies a coordinate space using an index value given in an identified list.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_No_Units"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_SPICE"],
            "version_id": ["1.0"],
            "local_identifier": ["Coordinate_Space_SPICE"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Identifies a coordinate space using SPICE names for the frame and origin."],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["body_spice_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["frame_spice_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_Indexed"],
            "version_id": ["4.0"],
            "local_identifier": ["Coordinate_Space_Indexed"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Coordinate_Space_Indexed class contains the attributes and\n        classes identifying the indexed coordinate space.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["coordinate_space_frame_type"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_Space_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["solution_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["Coordinate_Space_Identification"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Coordinate_Space_Identification class uniquely identifies a coordinate\n            space (i.e., reference frame + position) with respect to which the values of the\n            attributes in the containing class are defined.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "Coordinate_Space_Indexed", "Coordinate_Space_SPICE", "pds.Local_Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Coordinate_Space_Reference"],
            "version_id": ["1.0"],
            "local_identifier": ["Coordinate_Space_Reference"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Coordinate_Space_Reference class includes the attributes\n          that identify the reference coordinate space to be used in relation to\n          the spacecraft's present coordinate space. The reference coordinate\n          space is the space in which the present coordinate space is defined.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Coordinate_Space_Identification"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_System_Identification"],
            "version_id": ["1.0"],
            "local_identifier": ["Coordinate_System_Identification"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Coordinate_System_Identification class fully describes a\n        coordinate system. This class is typically used for orbiter/flyby geometry\n        while the Coordinate_Space construction is used for lander/rover geometry.\n        Coordinate_System_Identification provides the reference frame, coordinate\n        system type (cartesian, planetocentric, etc.), origin, and the instantiation\n        time of the system when appropriate. The instantiation time (coordinate_system_time_utc)\n        is used when a rotating frame has been 'frozen' at a particular epoch. Instantiation\n        time is not needed for inertial or rotating frames.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["coordinate_system_type"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["coordinate_system_time_utc"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Origin_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Reference_Frame_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Polynomial_Coefficients_1"],
            "version_id": ["1.0"],
            "local_identifier": ["Polynomial_Coefficients_1"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Polynomial_Coefficients_1 class provides a one polynomial coefficient.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["c0"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Polynomial_Coefficients_2"],
            "version_id": ["1.0"],
            "local_identifier": ["Polynomial_Coefficients_2"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Polynomial_Coefficients_2 class provides two polynomial coefficients.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["c0"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["c1"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Polynomial_Coefficients_3"],
            "version_id": ["1.0"],
            "local_identifier": ["Polynomial_Coefficients_3"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Polynomial_Coefficients_3 class provides three polynomial coefficients.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["c0"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["c1"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["c2"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Rotate_From"],
            "version_id": ["1.0"],
            "local_identifier": ["Rotate_From"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["A quaternion rotates one reference frame to another\n         reference frame. The Rotate_From class identifies the initial frame.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Frame_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Rotate_To"],
            "version_id": ["1.0"],
            "local_identifier": ["Rotate_To"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["A quaternion rotates a one reference frame to another\n          reference frame. The Rotate_To class identifies the destination frame.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Frame_Identification_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Quaternion_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Quaternion_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Quaternion_Base class defines a quaternion that represents\n          rotation between two right-handed reference frames. In this dictionary, quaternions\n          are always constructed so that the application of the quaternion describes the\n          rotation of one frame to a second frame. The two frames and the direction of\n          rotation must be identified unambiguously in the enclosing classes.\n\n          Quaternions are expressed as a set of four numbers in the order\n          (qcos, qsin1, qsin2, qsin3), where qcos = cos(theta/2) and\n           qsin(n) = sin(theta/2)*a(n). Theta is the angle of rotation and a is the\n           unit vector (x,y,z) around which the rotation occurs.\n\n          A document providing the full mathematical basis for this construction,\n          along with examples, and a summary of common pitfalls, is in preparation.\n          The current version can be obtained by contacting the PDS Engineering Node.\n\n          In application you need to know the four elements of the quaternion, the two end\n          point frames, and the direction of the rotation. This dictionary provides two\n          extensions to this Base class. In the Quaternion_Plus_Direction class we require the direction of\n          rotation. This class can only be used if the two end point frames are identified in\n          the enclosing class. This is generally the case in the Lander section.\n          The Quaternion_Plus_To_From class requires the two frames be identified explicitly with one\n          designated as the \"from frame\" and the other as the \"to frame\".\n        "],
            "abstract_flag": ["true"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["qcos"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["qsin1"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["qsin2"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["qsin3"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Quaternion_Model_Transform"],
            "version_id": ["1.0"],
            "local_identifier": ["Quaternion_Model_Transform"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The Quaternion_Model_Transform class specifies, along with Vector_Model_Transform\n            class, the transform used for the camera model in an image. Camera models created by the\n            calibration process have associated with them a pose, comprised of the position (offset)\n            and orientation (quaternion) of the camera at the time it was calibrated. The model is\n            transformed (\"pointed\") for a specific image by computing, generally using articulation\n            device kinematics, a final pose for the image. The camera model is then translated and\n            rotated from the calibration to final pose. This class specifies the quaternion portion\n            of the final pose.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Quaternion_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Quaternion_Plus_Direction"],
            "version_id": ["1.0"],
            "local_identifier": ["Quaternion_Plus_Direction"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Quaternion_Plus_Direction provides the four elements of a quaternion and its\n          direction of rotation. The two end point frames must be identified in\n          the enclosing class. See the defintion of Quaternion_Base for more details\n          on the quaternion classes in this dictionary.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Quaternion_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["rotation_direction"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Quaternion_Plus_To_From"],
            "version_id": ["1.0"],
            "local_identifier": ["Quaternion_Plus_To_From"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Quaternion_Plus_To_From provides the four\n        elements of a quaternion, plus attributes which identify the initial\n        (Rotate_From) and final (Rotate_To) frames of the rotation. See\n        the defintion of Quaternion_Base for more details on the\n        quaternion classes in this dictionary.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Quaternion_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Rotate_From"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Rotate_To"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["SPICE_Kernel_Identification"],
            "version_id": ["2.0"],
            "local_identifier": ["SPICE_Kernel_Identification"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The SPICE_Kernel_Identification class optionally includes\n            the SPICE kernel type and provides two alternatives for identifying\n            the product: LIDVID using Internal_Reference, and the file name of\n            the kernel file. Although optional, LIDVID should be given if one\n            is available. The optional kernel_provenance attribute indicates\n            whether the kernel is a predict or reconstructed kernel, or some\n            combination of the two, or if it is a kernel type for which such\n            distinctions do not apply.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.kernel_type"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["spice_kernel_file_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["kernel_provenance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["SPICE_Kernel_Files"],
            "version_id": ["1.0"],
            "local_identifier": ["SPICE_Kernel_Files"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The SPICE_Kernel_Files class provides references to the\n            SPICE files used when calculating geometric values.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["SPICE_Kernel_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["List_Index_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_Base"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The List_Index class is an abstract class designed to enable the use of\n            indexed lists. The minimum requirement is at least one of sequence number, name or \"id\",\n            plus the set of values themselves.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "index_sequence_number", "index_name", "index_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["3"]
            }]
        }, {
            "name": ["List_Index_Angle"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_Angle"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Used when the list values are angles.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["index_value_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["List_Index_Length"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_Length"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Used when the list values are lengths."],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["index_value_length"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["List_Index_No_Units"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_No_Units"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Used when the list values have no units."],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["index_value_number"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["List_Index_Text"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_Text"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Used when the list values are strings."],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["index_value_string"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["List_Index_Temperature"],
            "version_id": ["1.0"],
            "local_identifier": ["List_Index_Temperature"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["Used when the list values are temperatures. They may also have accompanying\n            temperature counts using index_value_number.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["index_value_temperature"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["index_value_number"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Display_Direction"],
            "version_id": ["1.0"],
            "local_identifier": ["Display_Direction"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Display_Direction class specifies which two\n        of the dimensions of an Array object should be displayed and how\n        they should be displayed in the vertical (line) and horizontal\n        (sample) dimensions of a display device. This class is essentially\n        the same as the class of the same name in the Display Dictionary, and\n        is redefined here for convenience.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["horizontal_display_axis"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["horizontal_display_direction"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["vertical_display_axis"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["vertical_display_direction"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Reference_Pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["Reference_Pixel"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Reference_Pixel class provides the pixel coordinates, line and sample,\n            to which values in the containing class apply. Integer values indicate the\n            center of the pixel. Sub-pixel values are permitted. For pixel_sample, the leading\n            edge (left edge for sample increasing to the right) has a value 0.5 less than the\n            integer value at the center, and the value for the trailing edge is the center integer\n            value + 0.5. For pixel_line, the leading and trailing edges (top and bottom respectively\n            for line increasing downward) again are -0.5 and +0.5 with respect to the center integer value.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["vertical_coordinate_pixel"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["horizontal_coordinate_pixel"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Object_Orientation_North_East"],
            "version_id": ["1.0"],
            "local_identifier": ["Object_Orientation_North_East"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Object_Orientation_North_East class provides the parameters\n                    needed to describe the orientation of an external coordinate\n                    system relative to the image coordinate frame as described by the\n                    Display_Direction class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["north_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["east_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Reference_Frame_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Object_Orientation_RA_Dec"],
            "version_id": ["1.0"],
            "local_identifier": ["Object_Orientation_RA_Dec"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Object_Orientation_RA_Dec class provides the\n                    parameters needed to describe the orientation of\n                    the celestial reference frame relative to the image\n                    coordinate frame as described by the Display_Direction class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Reference_Pixel"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["reference_pixel_location"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "right_ascension_hour_angle", "right_ascension_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["declination_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "celestial_north_clock_angle", "ecliptic_north_clock_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["2"]
            }, {
                "identifier_reference": ["Reference_Frame_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Object_Orientation_Clock_Angles"],
            "version_id": ["1.0"],
            "local_identifier": ["Object_Orientation_Clock_Angles"],
            "submitter_name": ["Anne Raugh"],
            "definition": ["The Object_Orientation_Clock_Angles class provides several\n                    clock angles which can be used to describe the orientation\n                    of the field of view with respect to various external references\n                    such as Celestial or Equatorial North.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "celestial_north_clock_angle", "celestial_east_clock_angle", "ecliptic_north_clock_angle", "ecliptic_east_clock_angle", "central_body_north_pole_clock_angle", "central_body_positive_pole_clock_angle", "target_north_pole_clock_angle", "target_positive_pole_clock_angle", "sun_direction_clock_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Image_Display_Geometry"],
            "version_id": ["3.0"],
            "local_identifier": ["Image_Display_Geometry"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Image_Display_Geometry class provides an unambiguous description\n            of the orientation of the image contents. Given an image, displayed as\n            described by the Display_Direction class, any one of the Object_Orientation_*\n            classes should allow unambiguous orientation of the contents of the image.\n            The Local_Internal_Reference class is used to identify the object to which this\n            instance of the Image_Display_Geometry class applies, and must be used if\n            there is more than one instance of Image_Display_Geometry in the label. The\n            appropriate value for local_reference_type is image_display_to_object.\n            The Object_Orientation_North_East class is typically used for instruments for\n            which the entire field of view is a portion of the target surface (e.g.,\n            instruments on Mars orbital spacecraft); otherwise use Object_Orientation_RA_Dec\n            (e.g., flyby missions, missions with orbit radii much larger than the target radius\n            such as Voyager or Cassini). At least one of these must be used. The two\n            *_Identification classes used here are Central_Body (e.g., Saturn if you are using\n            Planetocentric or planetographic coordinates in the Saturn system) and Target when the\n            described object in the FoV is not the Central_Body. For example giving the orientation\n            of the pole of Enceladus in Saturn Planetocentric coordinates, Central_Body = Saturn,\n            Target = Enceladus. Bottom line: put in enough information so someone else can figure\n            out the orientation of the field of view.\n            We also offer an option to provide the pointing information as a quaternion.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.Local_Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Display_Direction"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Central_Body_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "Object_Orientation_North_East", "Object_Orientation_RA_Dec"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["2"]
            }, {
                "identifier_reference": ["Quaternion_Plus_To_From"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Object_Orientation_Clock_Angles"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Expanded_Geometry"],
            "version_id": ["1.0"],
            "local_identifier": ["Expanded_Geometry"],
            "submitter_name": ["Mitch Gordon"],
            "definition": ["The Expanded_Geometry class provides a mechanism\n        \tto reference additional geometric metadata contained in a separate\n        \tobject or product (e.g., a table of metadata).\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.Local_Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["pds.Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Orbiter_Identification"],
            "version_id": ["1.0"],
            "local_identifier": ["Orbiter_Identification"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Orbiter_Identification class is a container of classes\n        \tused to establish global identifications for the Geometry_Orbiter class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Central_Body_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Pixel_Size_Projected"],
            "version_id": ["2.0"],
            "local_identifier": ["Pixel_Size_Projected"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Pixel_Size_Projected class gives the size,\n            in units of length (e.g., kilometers) of the projection\n            of a pixel onto the surface of the target which is specified\n            in the parent Geometry_Orbiter class. The reference_location\n            attribute is used to identify the specific point on the target.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "reference_location", "distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["horizontal_pixel_footprint"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["vertical_pixel_footprint"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Pixel_Dimensions"],
            "version_id": ["2.0"],
            "local_identifier": ["Pixel_Dimensions"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Pixel_Dimensions class contains information regarding pixel size.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pixel_field_of_view_method"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["horizontal_pixel_field_of_view"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["vertical_pixel_field_of_view"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Pixel_Size_Projected"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Distance_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Distance_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The distance between the two objects, both of which must be specified.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Distances_Specific"],
            "version_id": ["1.0"],
            "local_identifier": ["Distances_Specific"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Distances_Specific class is a container class for\n        \tspecific distances defined in this dictionary.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "spacecraft_geocentric_distance", "spacecraft_heliocentric_distance", "spacecraft_central_body_distance", "spacecraft_target_center_distance", "spacecraft_target_boresight_intercept_distance", "spacecraft_target_subspacecraft_distance", "target_geocentric_distance", "target_heliocentric_distance", "target_ssb_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Distances_Min_Max"],
            "version_id": ["1.0"],
            "local_identifier": ["Distances_Min_Max"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Distances_Min_Max class is a container class for\n        \tnamed distances given as minimum-maximum pairs. For distance, if\n        \teither the minimum or maximum parameter is given, both must be provided.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["minimum_spacecraft_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_spacecraft_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_spacecraft_central_body_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_central_body_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_spacecraft_target_center_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_target_center_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_spacecraft_target_boresight_intercept_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_target_boresight_intercept_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_spacecraft_target_subspacecraft_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_spacecraft_target_subspacecraft_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_target_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_target_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_target_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_target_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_target_ssb_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_target_ssb_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Distances_Start_Stop"],
            "version_id": ["1.0"],
            "local_identifier": ["Distances_Start_Stop"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Distances_Start_Stop class is a container class for\n        \tnamed distances given as pairs corresponding to the beginning and\n        \tend of the observation. For a distance, if either the start or\n        \tstop parameter is given, both must be provided.\n        \tIf any values from this class are included in the label, the\n        \tparameters geometry_start_time_utc and geometry_stop_time_utc must be\n        \tgiven in the enclosing Geometry_Orbiter class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["start_spacecraft_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_spacecraft_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_spacecraft_central_body_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_central_body_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_spacecraft_target_center_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_target_center_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_spacecraft_target_boresight_intercept_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_target_boresight_intercept_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_spacecraft_target_subspacecraft_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_spacecraft_target_subspacecraft_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_target_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_target_geocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_target_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_target_heliocentric_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_target_ssb_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_target_ssb_distance"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Distances"],
            "version_id": ["1.0"],
            "local_identifier": ["Distances"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Distances class is a container of distance classes.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Distances_Specific"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Distances_Min_Max"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Distances_Start_Stop"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Distance_Generic"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Pixel_Intercept"],
            "version_id": ["1.0"],
            "local_identifier": ["Pixel_Intercept"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Pixel_Intercept class provides the latitude and\n            longitude on the surface of the target for the projection\n            of the specified pixel. The pixel is specified using either\n            reference_pixel_location or Reference_Pixel. Although each of\n            these is optional, one must be used.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["reference_pixel_location"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Reference_Pixel"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pixel_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pixel_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Footprint_Vertices"],
            "version_id": ["2.0"],
            "local_identifier": ["Footprint_Vertices"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The Footprint_Vertices class provides a set\n            of latitude and longitude pairs which are the vertices\n            of a polygon representing the projected footprint of the\n            field of view on the target surface (or on a map).\n            Note this is intended for products such as maps,\n            or where the target fills the field of view. The vertices should\n            be listed either in clockwise or counterclockwise order.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Pixel_Intercept"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["2"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Surface_Geometry_Specific"],
            "version_id": ["1.0"],
            "local_identifier": ["Surface_Geometry_Specific"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The Surface_Geometry_Specific class contains classes and attributes\n            for various points on the surface of the target designated in the\n            enclosing Geometry_Orbiter.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Pixel_Intercept"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Footprint_Vertices"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subsolar_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subsolar_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subsolar_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subspacecraft_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subspacecraft_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["subspacecraft_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Surface_Geometry_Min_Max"],
            "version_id": ["1.0"],
            "local_identifier": ["Surface_Geometry_Min_Max"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The Surface_Geometry_Min_Max class contains attributes\n          providing surface geometry parameters as minimum/maximum pairs.\n          For any given parameter if one of minimum or maximum is given,\n          both must be given.\n          The min-max pairs for each parameter provide the range of that\n          parameter in the observation for the target specified using\n          the Geometry_Target_Identification class in the Orbiter_Identification\n          class under the parent Geometry_Orbiter class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["minimum_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subsolar_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subsolar_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subsolar_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subsolar_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subsolar_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subsolar_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subspacecraft_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subspacecraft_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subspacecraft_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subspacecraft_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_subspacecraft_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_subspacecraft_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Surface_Geometry_Start_Stop"],
            "version_id": ["1.0"],
            "local_identifier": ["Surface_Geometry_Start_Stop"],
            "submitter_name": ["Edward A. Guinness"],
            "definition": ["The Surface_Geometry_Start_Stop class contains attributes\n          providing surface geometry parameters given as pairs corresponding to\n          the beginning and end of the observation. For a parameter, if either\n          the start or stop parameter is given, both must be provided.\n        \tIf any values from this class are included in the label, the\n        \tparameters geometry_start_time_utc and geometry_stop_time_utc must be\n        \tgiven in the enclosing Geometry_Orbiter class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["lat_long_method"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subsolar_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subsolar_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subsolar_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subsolar_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subsolar_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subsolar_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subspacecraft_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subspacecraft_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subspacecraft_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subspacecraft_latitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_subspacecraft_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_subspacecraft_longitude"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Surface_Geometry"],
            "version_id": ["1.0"],
            "local_identifier": ["Surface_Geometry"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Surface_Geometry class is a container for surface geometry classes.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Surface_Geometry_Specific"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Surface_Geometry_Min_Max"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Surface_Geometry_Start_Stop"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Illumination_Specific"],
            "version_id": ["1.0"],
            "local_identifier": ["Illumination_Specific"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Illumination_Specific class contains attributes\n           providing illumination parameters at a single location in\n           the field of view. That location is specified by using one,\n           and only one of reference_location, reference_pixel_location,\n           or Reference_Pixel, If reference_location is used, and indicates\n           a point on a target, the target must be the one specified using\n           Geometry_Target_Identification in the parent Geometry_Orbiter class.\n           The provided value for each illumination attribute must correspond\n           to the time given by geometry_reference_time_utc.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["reference_location"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["reference_pixel_location"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Reference_Pixel"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "emission_angle", "incidence_angle", "phase_angle", "solar_elongation"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["4"]
            }]
        }, {
            "name": ["Illumination_Min_Max"],
            "version_id": ["1.0"],
            "local_identifier": ["Illumination_Min_Max"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Illumination_Min_Max class contains attributes\n          providing illumination parameters as minimum/maximum pairs.\n          For any given illumination parameter if one of minimum or\n          maximum is given, both must be given.\n          If a target is specified using the Geometry_Target_Identification class in the\n          Orbiter_Identification class under the same parent Geometry_Orbiter class,\n          the min-max pairs for each illumination parameter provide the range of that\n          parameter in the observation on that target. Otherwise the pair provides the\n          range for the entire field of view.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["minimum_emission_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_emission_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_incidence_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_incidence_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_phase_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_phase_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["minimum_solar_elongation"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["maximum_solar_elongation"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Illumination_Start_Stop"],
            "version_id": ["1.0"],
            "local_identifier": ["Illumination_Start_Stop"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Illumination_Start_Stop class contains attributes\n          providing illumination parameters as pairs  corresponding to\n          the beginning and end of the observation. If either the start or\n        \tstop parameter is given, both must be provided.\n        \tIf any values from this class are included in the label, the\n        \tparameters geometry_start_time_utc and geometry_stop_time_utc must be\n        \tgiven in the enclosing Geometry_Orbiter class.\n          If a target is specified using the Geometry_Target_Identification class\n          in the Orbiter_Identification class under the parent Geometry_Orbiter\n          class, the start-stop pairs for each illumination parameter provide\n          the range of that parameter in the observation on that target. Otherwise\n          the pair provides the range for the entire field of view.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["start_emission_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_emission_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_incidence_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_incidence_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_phase_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_phase_angle"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["start_solar_elongation"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["stop_solar_elongation"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Illumination_Geometry"],
            "version_id": ["1.0"],
            "local_identifier": ["Illumination_Geometry"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Illumination_Geometry class is a container for\n        \tillumination geometry classes."],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Illumination_Specific"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Illumination_Min_Max"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Illumination_Start_Stop"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of length. The\n            included attributes are not sufficient to identify the endpoints of the vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Extended_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Extended_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Extended_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of length. The included attributes are\n            not sufficient to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["light_time_correction_applied"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Position_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of linear velocity.\n            The included attributes are not sufficient to identify the\n            endpoints of the vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Extended_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Extended_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Extended_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of linear velocity.\n            The included attributes are not sufficient to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["light_time_correction_applied"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Velocity_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Acceleration_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Acceleration_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Acceleration_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of linear acceleration.\n            The included attributes are not sufficient to identify the endpoints of the vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x_acceleration"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y_acceleration"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z_acceleration"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Acceleration_Extended_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Acceleration_Extended_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Acceleration_Extended_Base is a three dimensional,\n            rectangular coordinates vector. Uses units of linear acceleration.\n            The included attributes are not sufficient to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["light_time_correction_applied"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Acceleration_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Base is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear units for the radius dimension, and\n            angular units for the other two dimensions. The included\n            attributes are not sufficient to identify the endpoints of the vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["radius_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["longitude_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["latitude_position"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Extended_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Extended_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Extended_Base is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear units for the radius dimension, and\n            angular units for the other two dimensions. The included\n            attributes are not sufficient to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["light_time_correction_applied"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Planetocentric_Position_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Base is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear velocity units for the radius dimension,\n            and angular velocity units for the other two dimensions. The included\n            attributes are not sufficient to identify the endpoints of the vector.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["radial_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["longitude_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["latitude_velocity"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Extended_Base"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Extended_Base"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Extended_Base is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear velocity units for the radius dimension,\n            and angular velocity units for the other two dimensions. The included\n            attributes are not sufficient to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["light_time_correction_applied"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_System_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Planetocentric_Velocity_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Unit"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Unit"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["This is a generic unit vector in Cartesian space.\n            The \"x\", \"y\", and \"z\" component have no units and are restricted to\n            values between -1.0 and 1.0 inclusive. Further the length of the\n            vector square root of the (sum of the squares of the components) must be 1.0.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x_unit"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y_unit"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z_unit"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_No_Units"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_No_Units"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["This is a generic vector in Cartesian space.\n            The \"x\", \"y\", and \"z\" component have no units.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Pixel"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Pixel"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["This a Cartesian pixel vector generally used in camera models.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["x_pixel"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["y_pixel"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["z_pixel"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Vector_Cartesian_Position_Generic is a three dimensional,\n            rectangular coordinates vector. Uses units of length.\n            Includes attributes to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Vector_Cartesian_Velocity_Generic is a three dimensional,\n            rectangular coordinates vector. Uses units of linear velocity.\n            Includes attributes to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Acceleration_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Acceleration_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["Vector_Cartesian_Acceleration_Generic is a three dimensional,\n            rectangular coordinates vector. Uses units of linear acceleration.\n            Includes attributes to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Cartesian_Acceleration_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Generic is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear units for the radius dimension, and\n            angular units for the other two dimensions. Includes attributes to\n            identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Planetocentric_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Generic"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Generic"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Generic is a three dimensional\n            spherical vector (radius, longitude, latitude) with the angular\n            coordinates defined to be consistent with the Planetocentric\n            coordinate system. Uses linear velocity units for the radius dimension,\n            and angular velocity units for the other two dimensions. Includes\n            attributes to identify the endpoints of the vector.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Observer_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Geometry_Target_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Planetocentric_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Central_Body_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Central_Body_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Central_Body_To_Spacecraft\n            is a linear, rectangular coordinates vector from the center\n            of mass of the central body (e.g., planet) to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Central_Body_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Central_Body_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Central_Body_To_Target\n            is a linear, rectangular coordinates vector from the center\n            of mass of the central body (e.g., planet) to the target specified\n            in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Spacecraft_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Spacecraft_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Spacecraft_To_Target\n            is a linear, rectangular coordinates vector from the spacecraft\n            to the target specified in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Central_Body_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Central_Body_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Central_Body_To_Spacecraft\n            is a spherical position vector in Planetocentric coordinates.\n            It extends from the center of mass of the central body (e.g.,\n            planet) to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Central_Body_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Central_Body_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Central_Body_To_Target\n            is a spherical position vector in Planetocentric coordinates.\n            It extends from the center of mass of the central body (e.g.,\n            planet) to the target specified in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Position_Spacecraft_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Position_Spacecraft_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Position_Spacecraft_To_Target\n            is a spherical position vector in Planetocentric coordinates.\n            It extends from the spacecraft to the target specified in the parent\n            Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_SSB_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_SSB_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_SSB_To_Central_Body\n            is a linear, rectangular coordinates vector from the Solar\n            System Barycenter to the central body (e.g., planet).\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_SSB_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_SSB_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_SSB_To_Spacecraft\n            is a linear, rectangular coordinates vector from the Solar\n            System Barycenter to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_SSB_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_SSB_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_SSB_To_Target\n            is a linear, rectangular coordinates vector from the Solar\n            System Barycenter to the target specified in the parent\n            Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Sun_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Sun_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Sun_To_Central_Body\n            is a linear, rectangular coordinates vector from the Sun\n            to the central body (e.g., planet).\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Sun_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Sun_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Sun_To_Spacecraft\n            is a linear, rectangular coordinates vector from the Sun\n            to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Sun_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Sun_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Sun_To_Target\n            is a linear, rectangular coordinates vector from the Sun\n            to the target specified in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Earth_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Earth_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Earth_To_Central_Body\n            is a linear, rectangular coordinates vector from the Earth\n            to the central body (e.g., planet).\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Earth_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Earth_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Earth_To_Spacecraft\n            is a linear, rectangular coordinates vector from the Earth\n            to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Position_Earth_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Position_Earth_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Position_Earth_To_Target\n            is a linear, rectangular coordinates vector from the Earth\n            to the target specified in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Spacecraft_Relative_To_Central_Body\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the spacecraft with respect to the\n            central body (e.g., planet).\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Spacecraft_Relative_To_Target\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the spacecraft with respect to the\n            target specified in the parent Geometry_Orbiter class.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Earth"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Earth"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Spacecraft_Relative_To_Earth\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the spacecraft with respect to Earth.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_SSB"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_SSB"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Spacecraft_Relative_To_SSB\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the spacecraft with respect to the\n            Solar System Barycenter.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Sun"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Spacecraft_Relative_To_Sun"],
            "submitter_name": ["Anne Raugh"],
            "definition": ["\n            Vector_Cartesian_Velocity_Spacecraft_Relative_To_Sun is a\n            velocity vector in rectangular coordinates that gives the\n            velocity of the spacecraft with respect to the center of\n            the Sun.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Target_Relative_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Target_Relative_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Target_Relative_To_Central_Body\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the designated target with respect to the\n            central body (e.g., planet).\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Target_Relative_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Target_Relative_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Target_Relative_To_Spacecraft\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the designated target with respect to the\n            spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Target_Relative_To_Earth"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Target_Relative_To_Earth"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Target_Relative_To_Earth\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the designated target with respect to Earth.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Target_Relative_To_SSB"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Target_Relative_To_SSB"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Cartesian_Velocity_Target_Relative_To_SSB\n            is a velocity vector in rectangular coordinates that\n            gives the velocity of the designated target with respect\n            to the Solar System Barycenter.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Cartesian_Velocity_Target_Relative_To_Sun"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Cartesian_Velocity_Target_Relative_To_Sun"],
            "submitter_name": ["Anne Raugh"],
            "definition": ["\n            Vector_Cartesian_Velocity_Target_Relative_To_Sun is a\n            velocity vector in rectangular coordinates that gives the\n            velocity of the designated target with respect to the center\n            of the sun.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Spacecraft_Relative_To_Target"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Spacecraft_Relative_To_Target"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Spacecraft_Relative_To_Target\n            is a spherical velocity vector in Planetocentric coordinates that\n            gives the velocity of the spacecraft with respect to the designated\n            target.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Target_Relative_To_Central_Body"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Target_Relative_To_Central_Body"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Target_Relative_To_Central_Body\n            is a spherical velocity vector in Planetocentric coordinates that\n            gives the velocity of the target with respect to the central body.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Planetocentric_Velocity_Target_Relative_To_Spacecraft"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Planetocentric_Velocity_Target_Relative_To_Spacecraft"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vector_Planetocentric_Velocity_Target_Relative_To_Spacecraft\n            is a spherical velocity vector in Planetocentric coordinates that\n            gives the velocity of the target with respect to the spacecraft.\n            While the class Coordinate_System_Identification is optional, it must be used\n            here if the coordinate system has not been specified in the enclosing class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Planetocentric_Velocity_Extended_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vectors_Cartesian_Specific"],
            "version_id": ["1.0"],
            "local_identifier": ["Vectors_Cartesian_Specific"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vectors_Cartesian_Specific class is a\n            container class for all cartesian vectors\n            with pre-identified endpoints.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "Vector_Cartesian_Position_Central_Body_To_Spacecraft", "Vector_Cartesian_Position_Central_Body_To_Target", "Vector_Cartesian_Position_Spacecraft_To_Target", "Vector_Cartesian_Position_SSB_To_Central_Body", "Vector_Cartesian_Position_SSB_To_Spacecraft", "Vector_Cartesian_Position_SSB_To_Target", "Vector_Cartesian_Position_Sun_To_Central_Body", "Vector_Cartesian_Position_Sun_To_Spacecraft", "Vector_Cartesian_Position_Sun_To_Target", "Vector_Cartesian_Position_Earth_To_Central_Body", "Vector_Cartesian_Position_Earth_To_Spacecraft", "Vector_Cartesian_Position_Earth_To_Target", "Vector_Cartesian_Velocity_Spacecraft_Relative_To_Central_Body", "Vector_Cartesian_Velocity_Spacecraft_Relative_To_Target", "Vector_Cartesian_Velocity_Spacecraft_Relative_To_Earth", "Vector_Cartesian_Velocity_Spacecraft_Relative_To_SSB", "Vector_Cartesian_Velocity_Spacecraft_Relative_To_Sun", "Vector_Cartesian_Velocity_Target_Relative_To_Central_Body", "Vector_Cartesian_Velocity_Target_Relative_To_Spacecraft", "Vector_Cartesian_Velocity_Target_Relative_To_Earth", "Vector_Cartesian_Velocity_Target_Relative_To_SSB", "Vector_Cartesian_Velocity_Target_Relative_To_Sun"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Vectors_Planetocentric_Specific"],
            "version_id": ["1.0"],
            "local_identifier": ["Vectors_Planetocentric_Specific"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vectors_Planetocentric_Specific class is a\n            container class for all planetocentric vectors\n            with pre-identified endpoints.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "Vector_Planetocentric_Position_Central_Body_To_Spacecraft", "Vector_Planetocentric_Position_Central_Body_To_Target", "Vector_Planetocentric_Position_Spacecraft_To_Target", "Vector_Planetocentric_Velocity_Spacecraft_Relative_To_Target", "Vector_Planetocentric_Velocity_Target_Relative_To_Central_Body", "Vector_Planetocentric_Velocity_Target_Relative_To_Spacecraft"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Generic_Vectors"],
            "version_id": ["1.0"],
            "local_identifier": ["Generic_Vectors"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Generic_Vectors class is a container class for all\n            of the build your own vector templates.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "Vector_Cartesian_Position_Generic", "Vector_Cartesian_Velocity_Generic", "Vector_Cartesian_Acceleration_Generic", "Vector_Planetocentric_Position_Generic", "Vector_Planetocentric_Velocity_Generic"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Vector_Model_Transform"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Model_Transform"],
            "submitter_name": ["Jordan Padams"],
            "definition": ["The Vector_Model_Transform class specifies, along with the Quaternion_Model_Transform\n            class, the transform used for the camera model in this image. Camera models created by the\n            calibration process have associated with them a pose, comprised of the position (offset)\n            and orientation (quaternion) of the camera at the time it was calibrated. The model is\n            transformed (\"pointed\") for a specific image by computing, generally using articulation device\n            kinematics, a final pose for the image. The camera model is then translated and rotated from\n            the calibration to final pose. This class specifies the offset portion of the final pose.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_No_Units"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vectors"],
            "version_id": ["1.0"],
            "local_identifier": ["Vectors"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Vectors class is a container of vector classes.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.comment"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vectors_Cartesian_Specific"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vectors_Planetocentric_Specific"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Generic_Vectors"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Geometry_Orbiter"],
            "version_id": ["1.0"],
            "local_identifier": ["Geometry_Orbiter"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Geometry_Orbiter class is a container for geometric information\n          (positions, velocities, orientations, etc.) relevant to orbiter or flyby\n          spacecraft observations.\n\n          If any of the contained classes or attributes have central body,\n          and or target in the class or attribute name\n          (e.g., spacecraft_to_central_body_distance,\n          Vector_Planetocentric_Position_Spacecraft_To_Target), then the\n          central body and or target must be identified in this class.\n\n          If more than one geometry_reference_time_utc, target or central body need\n          to be identified to fully describe the data, use multiple instances of\n          the Geometry_Orbiter class.\n\n          Do not use Coordinate_System at this level if more than one coordinate\n          system is used in the contained classes. If more than one coordinate system\n          is used, specify Coordinate_System in each of the subordinate classes\n          where it is appropriate.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "geometry_reference_time_utc", "geometry_start_time_utc", "geometry_stop_time_utc"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["3"]
            }, {
                "identifier_reference": ["geometry_reference_time_tdb"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Orbiter_Identification"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Pixel_Dimensions"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Distances"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Surface_Geometry"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Illumination_Geometry"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vectors"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Angle_Index"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Angle_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Angle class is a container for the set of\n          angles the spacecraft device specified in the parent\n          Articulation_Device_Parameters class.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Angle"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Angle"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Angle"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Angle class is a container for the set of\n          angles between the various components or devices of the spacecraft.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Device_Angle_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Device_Component_State_Index"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Component_State_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Component_State_Index class is a container\n          for one state of a component of the articulation device.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Text"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Component_State"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Component_State"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Component_State class is a container for the\n            states of the various components of the articulation device.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Device_Component_State_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Device_Motor_Counts_Index"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Motor_Counts_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Motor_Counts_Index class is a container\n          for the attributes that describe the motor step count information\n          for a single motor on a device.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_No_Units"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Motor_Counts"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Motor_Counts"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Motor_Counts class is a container for the classes\n            that describe the motor step count information for device components.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Device_Motor_Counts_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Vector_Device_Gravity"],
            "version_id": ["2.0"],
            "local_identifier": ["Vector_Device_Gravity"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Device_Gravity class is a unit vector that specifies\n          the direction of an external force acting on the articulation\n          device, in the spacecraft's coordinate system, at the time the pose was computed.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Unit"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Temperature_Index"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Temperature_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Temperature_Index class specifies the\n        \tattributes describing the temperature of one device or some part of a device.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_Temperature"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Device_Temperature"],
            "version_id": ["1.0"],
            "local_identifier": ["Device_Temperature"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Device_Temperature class is a container for all\n          available device temperatures of an articulated device and/or\n          part(s) of a device.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Device_Temperature_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Vector_Axis"],
            "version_id": ["2.0"],
            "local_identifier": ["Vector_Axis"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Axis is a unit vector that describes the axis\n            of the camera, defined as the normal to the image plane.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Unit"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Center"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Center"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Center describes the location of\n            the pinhole of a camera.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Horizontal"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Horizontal"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Horizontal encodes the horizontal axis of\n            the image plane (H'), the coordinate (Hc) of the image column at the\n            optical center of the image plane, and the horizontal focal length (Hs)\n            of the camera, in pixels.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Pixel"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Vertical"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Vertical"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Vertical encodes the vertical axis of\n            the image plane (V' or Vp), the coordinate (Vc) of the image row(?) at the\n            optical center of the image plane, and the vertical focal length (Vs)\n            of the camera, in pixels.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Pixel"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Optical_Terms"],
            "version_id": ["1.0"],
            "local_identifier": ["Optical_Terms"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Optical_Terms provides the optical axis\n            coefficients used for lens-distortion correction when the\n            distortion is radial.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Polynomial_Coefficients_3"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Radial_Terms"],
            "version_id": ["1.0"],
            "local_identifier": ["Radial_Terms"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Radial_Terms class provides the radial lens\n            distortion coefficients defined in the ground (object)\n            coordinate system.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Polynomial_Coefficients_3"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Entrance"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Entrance"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Entrance is the unit vector describing the location of\n            the entrance pupil of a camera.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Unit"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["CAHV_Model"],
            "version_id": ["2.0"],
            "local_identifier": ["CAHV_Model"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The CAHV camera model is equivalent to the standard\n            linear photogrammetric model for a pinhole camera, It is useful for\n            very small field of view cameras and as a building block for more\n            complex camera models.\n\n            The CAHV model consists of four 3-vectors: C, A, H, and V.\n\n            Vector C gives the location of the pinhole.\n\n            Vector A gives the camera axis, defined as the normal to the image plane.\n\n            Vector H encodes the horizontal axis of the image plane (H'), the coor-\n            dinate (Hc) of the image column at the optical center of the image plane,\n            and the horizontal focal length (Hs) of the camera, in pixels.\n\n            Vector V encodes corresponding information (V', Vc, Vs) in the vertical\n            direction.\n\n            The angle (theta) between horizontal and vertical vectors H' and V' is\n            about 90 degrees.\n\n            (Taken from Camera Response Simulation for Planetary Exploration, by\n            Dr. Richard Madison, Marc Pomerantz, and Dr. Abhinandan Jain,\n            http://trs-new.jpl.nasa.gov/dspace/bitstream/2014/37771/1/05-1692.pdf)\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Center"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Axis"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Horizontal"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Vertical"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["CAHVOR_Model"],
            "version_id": ["1.0"],
            "local_identifier": ["CAHVOR_Model"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The CAHVOR model describes a camera with radial lens\n            distortion about the lens axis. In addition to the CAHV parameters,\n            it includes 3-vectors O and R. Vector O is the optical axis of the\n            lens, slightly different from vector A due to imperfect lens mounting.\n            A ray from a point in space, passing through the pinhole, bends at the\n            pinhole according to a function of the angle between the ray and optical\n            axis O. The function is a polynomial whose coefficients are stored in\n            vector R.\n\n            (Taken from Camera Response Simulation for Planetary Exploration, by\n            Dr. Richard Madison, Marc Pomerantz, and Dr. Abhinandan Jain,\n            http://trs-new.jpl.nasa.gov/dspace/bitstream/2014/37771/1/05-1692.pdf)\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Optical_Terms"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Radial_Terms"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["CAHV_Model"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["CAHVORE_Model"],
            "version_id": ["2.0"],
            "local_identifier": ["CAHVORE_Model"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["A third model, CAHVORE, describes more general cameras\n            including those with fisheye or otherwise wide field of view lenses.\n            An additional vector, E, describes the apparent motion of the camera\n            entrance pupil.\n\n            (Taken from Camera Response Simulation for Planetary Exploration, by\n            Dr. Richard Madison, Marc Pomerantz, and Dr. Abhinandan Jain,\n            http://trs-new.jpl.nasa.gov/dspace/bitstream/2014/37771/1/05-1692.pdf)\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Entrance"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["cahvore_model_type"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["cahvore_model_parameter"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["CAHVOR_Model"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_Present"],
            "version_id": ["1.0"],
            "local_identifier": ["Coordinate_Space_Present"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Coordinate_Space_Present class  includes the attributes\n          that identifies the spacecraft's present coordinate space.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Coordinate_Space_Identification"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Vector_Origin_Offset"],
            "version_id": ["1.0"],
            "local_identifier": ["Vector_Origin_Offset"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Vector_Origin_Offset class contains attributes that\n          specify the offset from the reference coordinate system's origin\n          to the origin of the coordinate system. It is the location of the\n          current system's origin as measured in the reference system.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Vector_Cartesian_Position_Base"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Motion_Counter_Index"],
            "version_id": ["1.0"],
            "local_identifier": ["Motion_Counter_Index"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Motion_Counter_Index class identifies and populates\n            one element of a Motion_Counter list.  The class should be repeated\n            for each element of the list.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["List_Index_No_Units"],
                "reference_type": ["parent_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Articulation_Device_Parameters"],
            "version_id": ["3.0"],
            "local_identifier": ["Articulation_Device_Parameters"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Articulation_Device_Parameters class contains those\n          attributes and sub-classes that describe an articulation device.\n          An articulation device is anything that can move independently\n          of the spacecraft to which it is attached. Examples include mast\n          heads, wheel bogies, arms, filter wheel, scan platforms.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["device_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["device_name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["device_mode"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["device_phase"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["selected_instrument_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "Device_Angle", "Device_Component_State", "Device_Motor_Counts", "Vector_Device_Gravity", "Device_Temperature", "Coordinate_Space_Present", "Coordinate_Space_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Camera_Model_Parameters"],
            "version_id": ["2.0"],
            "local_identifier": ["Camera_Model_Parameters"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["A camera model describes the mathematical relationship\n            between the coordinates of a point in 3-dimensional space and its\n            projection onto a 2-dimensional image plane.  There are numerous\n            types of camera models, only two of which are currently implemented.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["model_type"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["calibration_source_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["solution_id"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.Internal_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["XSChoice#", "CAHV_Model", "CAHVOR_Model", "CAHVORE_Model"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["XSChoice#", "Reference_Frame_Identification", "Coordinate_Space_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Quaternion_Model_Transform"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Model_Transform"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Coordinate_Space_Definition"],
            "version_id": ["3.0"],
            "local_identifier": ["Coordinate_Space_Definition"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Coordinate_Space classes are typically used for lander/rover\n            geometry while the Coordinate_System construction is used for\n            orbiter/flyby geometry.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["positive_azimuth_direction"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["positive_elevation_direction"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_Space_Present"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Vector_Origin_Offset"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Quaternion_Plus_Direction"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Coordinate_Space_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Derived_Geometry"],
            "version_id": ["4.0"],
            "local_identifier": ["Derived_Geometry"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Derived_Geometry class is a container for surface based observations\n            (lander or rover). It is used to provide some geometric quantities relative to a\n            specific Reference Coordinate Space.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["XSChoice#", "incidence_angle", "emission_angle", "phase_angle", "instrument_azimuth", "instrument_elevation", "solar_azimuth", "solar_elevation", "start_azimuth", "stop_azimuth"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Coordinate_Space_Reference"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }]
        }, {
            "name": ["Motion_Counter"],
            "version_id": ["1.0"],
            "local_identifier": ["Motion_Counter"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Motion_Counter class provides a set of integers that\n            describe a (potentially) unique location (position / orientation) for a\n            rover or other movable object. Each time an event occurs that results in\n            a movement, a new motion counter value is created. This includes\n            intentional motion due to drive commands, as well as potential motion\n            due to other articulating devices, such as arms or antennae. This motion\n            counter (or part of it) is used as a reference to define instances of\n            coordinate systems that can move such as SITE or ROVER frames. The\n            motion counter is defined in a mission-specific manner. Although the\n            original intent was to have incrementing indices (e.g., MER), the motion\n            counter could also contain any integer values that conform to the above\n            definition, such as time or spacecraft clock values.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["pds.name"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["pds.local_identifier"],
                "reference_type": ["attribute_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Motion_Counter_Index"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["1"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Geometry_Lander"],
            "version_id": ["1.0"],
            "local_identifier": ["Geometry_Lander"],
            "submitter_name": ["Elizabeth Rye"],
            "definition": ["The Geometry_Lander class is a container for all geometric information in the label\n          relating to a landed spacecraft, including rovers.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["false"],
            "DD_Association": [{
                "identifier_reference": ["Articulation_Device_Parameters"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Camera_Model_Parameters"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Coordinate_Space_Definition"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Derived_Geometry"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Motion_Counter"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }, {
            "name": ["Geometry"],
            "version_id": ["1.0"],
            "local_identifier": ["Geometry"],
            "submitter_name": ["Mitchell K. Gordon"],
            "definition": ["The Geometry class is a container for all geometric\n        \tinformation in the label. The Image_Display_Geometry class should\n        \thave one instance if the primary data object is an Array object\n        \tfor which two of the dimensions are suitable for display in the\n          vertical (line) and horizontal (sample) dimensions of a display\n          device.\n          Multiple instances of the Image_Display_Geometry class are only\n          appropriate if the data product contains multiple Array objects\n          and the orientations of the various objects are not the same.\n        "],
            "abstract_flag": ["false"],
            "element_flag": ["true"],
            "DD_Association": [{
                "identifier_reference": ["SPICE_Kernel_Files"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Expanded_Geometry"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["1"]
            }, {
                "identifier_reference": ["Image_Display_Geometry"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Geometry_Orbiter"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }, {
                "identifier_reference": ["Geometry_Lander"],
                "reference_type": ["component_of"],
                "minimum_occurrences": ["0"],
                "maximum_occurrences": ["*"]
            }]
        }],
        "DD_Rule": [{
            "local_identifier": ["Expanded_Geometry_1"],
            "rule_context": ["geom:Expanded_Geometry/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_expanded_geometry'\n            "],
                "rule_message": ["For Internal_Reference in Expanded_Geometry, reference_type must equal 'geometry_to_expanded_geometry'\n            "]
            }]
        }, {
            "local_identifier": ["Expanded_Geometry_2"],
            "rule_context": ["geom:Expanded_Geometry/pds:Local_Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:local_reference_type = 'to_expanded_geometry'\n            "],
                "rule_message": ["For Local_Internal_Reference in geom:Expanded_Geometry, local_reference_type must equal 'to_expanded_geometry'\n            "]
            }]
        }, {
            "local_identifier": ["spice_kernel_0"],
            "rule_context": ["geom:SPICE_Kernel_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_SPICE_kernel'\n            "],
                "rule_message": ["For Internal_Reference in SPICE_Kernel_Identification, reference_type must equal 'geometry_to_SPICE_kernel'\n            "]
            }]
        }, {
            "local_identifier": ["camera_model_parameters_0"],
            "rule_context": ["geom:Camera_Model_Parameters/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_camera_model'\n            "],
                "rule_message": ["For Internal_Reference in Camera_Model_Parameters, reference_type must equal 'geometry_to_camera_model'.\n            "]
            }]
        }, {
            "local_identifier": ["coord_space_0"],
            "rule_context": ["//geom:Coordinate_Space_Reference/pds:Local_Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:local_reference_type = 'to_reference_coordinate_space'\n            "],
                "rule_message": ["For Local_Internal_Reference in geom:Coordinate_Space_Reference, local_reference_type must equal 'to_reference_coordinate_space'\n            "]
            }]
        }, {
            "local_identifier": ["Illumination_Specific_0"],
            "rule_context": ["//geom:Illumination_Geometry/geom:Illumination_Specific"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:reference_location) and not (geom:reference_pixel_location) and not (geom:Reference_Pixel))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:reference_location, geom:reference_pixel_location, geom:Reference_Pixel."]
            }]
        }, {
            "local_identifier": ["Central_Body_Identification_0"],
            "rule_context": ["//geom:Central_Body_Identification"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:body_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:body_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Central_Body_Identification_1"],
            "rule_context": ["//geom:Central_Body_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_body'\n            "],
                "rule_message": ["For Internal_Reference in Central_Body_Identification, reference_type must equal 'geometry_to_body'\n            "]
            }]
        }, {
            "local_identifier": ["Coordinate_System_Origin_Identification_0"],
            "rule_context": ["//geom:Coordinate_System_Origin_Identification"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:body_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:body_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Coordinate_System_Origin_Identification_1"],
            "rule_context": ["//geom:Coordinate_System_Origin_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_body'\n            "],
                "rule_message": ["For Internal_Reference in Coordinate_System_Origin_Identification, reference_type must equal 'geometry_to_body'\n            "]
            }]
        }, {
            "local_identifier": ["Observer_Identification_0"],
            "rule_context": ["//geom:Observer_Identification"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:body_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:body_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Observer_Identification_1"],
            "rule_context": ["//geom:Observer_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_body'\n            "],
                "rule_message": ["For Internal_Reference in geom:Observer_Identification, reference_type must equal 'geometry_to_body'\n            "]
            }]
        }, {
            "local_identifier": ["Geometry_Target_Identification_0"],
            "rule_context": ["//geom:Geometry_Target_Identification"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:body_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:body_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Geometry_Target_Identification_1"],
            "rule_context": ["//geom:Geometry_Target_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_body'\n            "],
                "rule_message": ["For Internal_Reference in geom:Geometry_Target_Identification, reference_type must equal 'geometry_to_body'\n            "]
            }]
        }, {
            "local_identifier": ["Reference_Frame_Identification_0"],
            "rule_context": ["//geom:Reference_Frame_Identification"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:frame_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:frame_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Reference_Frame_Identification_1"],
            "rule_context": ["//geom:Reference_Frame_Identification/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_reference_frame'\n            "],
                "rule_message": ["For Internal_Reference in geom:Reference_Frame_Identification, reference_type must equal 'geometry_to_reference_frame'\n            "]
            }]
        }, {
            "local_identifier": ["Rotate_From_0"],
            "rule_context": ["//geom:Rotate_From"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:frame_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:frame_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Rotate_From_1"],
            "rule_context": ["//geom:Rotate_From/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_reference_frame'\n            "],
                "rule_message": ["For Internal_Reference in geom:Rotate_From, reference_type must equal 'geometry_to_reference_frame'\n            "]
            }]
        }, {
            "local_identifier": ["Rotate_To_0"],
            "rule_context": ["//geom:Rotate_To"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:frame_spice_name) and not (geom:name) and not (pds:Internal_Reference))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:frame_spice_name, geom:name, pds:Internal_Reference."]
            }]
        }, {
            "local_identifier": ["Rotate_To_1"],
            "rule_context": ["//geom:Rotate_To/pds:Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:reference_type = 'geometry_to_reference_frame'\n            "],
                "rule_message": ["For Internal_Reference in geom:Rotate_To, reference_type must equal 'geometry_to_reference_frame'\n            "]
            }]
        }, {
            "local_identifier": ["Image_Display_Geometry_0"],
            "rule_context": ["geom:Image_Display_Geometry/pds:Local_Internal_Reference"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["pds:local_reference_type = 'display_to_data_object'\n            "],
                "rule_message": ["For Local_Internal_Reference in geom:Image_Display_Geometry, local_reference_type must equal 'display_to_data_object'.\n            "]
            }]
        }, {
            "local_identifier": ["Pixel_Intercept_0"],
            "rule_context": ["geom:Pixel_Intercept"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if (not(geom:reference_pixel_location) and not (geom:Reference_Pixel))  then false() else true()"],
                "rule_message": ["At least one of the following must be present: geom:reference_pixel_location, geom:Reference_Pixel."]
            }]
        }, {
            "local_identifier": ["Geometry_Orbiter_0"],
            "rule_context": ["geom:Geometry_Orbiter"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:geometry_start_time_utc) and not (geom:geometry_stop_time_utc))  then false() else true()"],
                "rule_message": ["geom:geometry_start_time_utc and geom:geometry_stop_time_utc, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:geometry_stop_time_utc) and not (geom:geometry_start_time_utc))  then false() else true()"],
                "rule_message": ["geom:geometry_start_time_utc and geom:geometry_stop_time_utc, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Illumination_1"],
            "rule_context": ["geom:Illumination_Min_Max"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_emission_angle) and not (geom:maximum_emission_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_emission_angle and geom:maximum_emission_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_emission_angle) and not (geom:minimum_emission_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_emission_angle and geom:maximum_emission_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_incidence_angle) and not (geom:maximum_incidence_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_incidence_angle and geom:maximum_incidence_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_incidence_angle) and not (geom:minimum_incidence_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_incidence_angle and geom:maximum_incidence_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_phase_angle) and not (geom:maximum_phase_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_phase_angle and geom:maximum_phase_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_phase_angle) and not (geom:minimum_phase_angle))  then false() else true()"],
                "rule_message": ["geom:minimum_phase_angle and geom:maximum_phase_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_solar_elongation) and not (geom:maximum_solar_elongation))  then false() else true()"],
                "rule_message": ["geom:minimum_solar_elongation and geom:maximum_solar_elongation, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_solar_elongation) and not (geom:minimum_solar_elongation))  then false() else true()"],
                "rule_message": ["geom:minimum_solar_elongation and geom:maximum_solar_elongation, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Illumination_2"],
            "rule_context": ["geom:Illumination_Start_Stop"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["ancestor::geom:Geometry_Orbiter/geom:geometry_start_time_utc and ancestor::geom:Geometry_Orbiter/geom:geometry_stop_time_utc"],
                "rule_message": ["geom:If you use the Illumination_Start_Stop class, you must give values for Geometry_Orbiter/geometry_start_time_utc and Geometry_Orbiter/geometry_stop_time_utc."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_emission_angle) and not (geom:stop_emission_angle))  then false() else true()"],
                "rule_message": ["geom:start_emission_angle and geom:stop_emission_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_emission_angle) and not (geom:start_emission_angle))  then false() else true()"],
                "rule_message": ["geom:start_emission_angle and geom:stop_emission_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_incidence_angle) and not (geom:stop_incidence_angle))  then false() else true()"],
                "rule_message": ["geom:start_incidence_angle and geom:stop_incidence_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_incidence_angle) and not (geom:start_incidence_angle))  then false() else true()"],
                "rule_message": ["geom:start_incidence_angle and geom:stop_incidence_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_phase_angle) and not (geom:stop_phase_angle))  then false() else true()"],
                "rule_message": ["geom:start_phase_angle and geom:stop_phase_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_phase_angle) and not (geom:start_phase_angle))  then false() else true()"],
                "rule_message": ["geom:start_phase_angle and geom:stop_phase_angle, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_solar_elongation) and not (geom:stop_solar_elongation))  then false() else true()"],
                "rule_message": ["geom:start_solar_elongation and geom:stop_solar_elongation, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_solar_elongation) and not (geom:start_solar_elongation))  then false() else true()"],
                "rule_message": ["geom:start_solar_elongation and geom:stop_solar_elongation, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Surface_Geom_1"],
            "rule_context": ["geom:Surface_Geometry_Min_Max"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_latitude) and not (geom:maximum_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_latitude and geom:maximum_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_latitude) and not (geom:minimum_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_latitude and geom:maximum_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_longitude) and not (geom:maximum_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_longitude and geom:maximum_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_longitude) and not (geom:minimum_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_longitude and geom:maximum_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subsolar_azimuth) and not (geom:maximum_subsolar_azimuth))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_azimuth and geom:maximum_subsolar_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subsolar_azimuth) and not (geom:minimum_subsolar_azimuth))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_azimuth and geom:maximum_subsolar_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subsolar_latitude) and not (geom:maximum_subsolar_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_latitude and geom:maximum_subsolar_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subsolar_latitude) and not (geom:minimum_subsolar_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_latitude and geom:maximum_subsolar_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subsolar_longitude) and not (geom:maximum_subsolar_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_longitude and geom:maximum_subsolar_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subsolar_longitude) and not (geom:minimum_subsolar_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subsolar_longitude and geom:maximum_subsolar_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subspacecraft_azimuth) and not (geom:maximum_subspacecraft_azimuth))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_azimuth and geom:maximum_subspacecraft_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subspacecraft_azimuth) and not (geom:minimum_subspacecraft_azimuth))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_azimuth and geom:maximum_subspacecraft_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subspacecraft_latitude) and not (geom:maximum_subspacecraft_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_latitude and geom:maximum_subspacecraft_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subspacecraft_latitude) and not (geom:minimum_subspacecraft_latitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_latitude and geom:maximum_subspacecraft_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_subspacecraft_longitude) and not (geom:maximum_subspacecraft_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_longitude and geom:maximum_subspacecraft_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_subspacecraft_longitude) and not (geom:minimum_subspacecraft_longitude))  then false() else true()"],
                "rule_message": ["geom:minimum_subspacecraft_longitude and geom:maximum_subspacecraft_longitude, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Surface_Geom_2"],
            "rule_context": ["geom:Surface_Geometry_Start_Stop"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_latitude) and not (geom:lat_long_method))  then false() else true()"],
                "rule_message": ["If you give geom:start_latitude and geom:stop_latitude, then a value for lat_long_method must be given."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["ancestor::geom:Geometry_Orbiter/geom:geometry_start_time_utc and ancestor::geom:Geometry_Orbiter/geom:geometry_stop_time_utc"],
                "rule_message": ["geom:If you use the Surface_Geometry_Start_Stop class, you must give values for Geometry_Orbiter/geometry_start_time_utc and Geometry_Orbiter/geometry_stop_time_utc."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_latitude) and not (geom:stop_latitude))  then false() else true()"],
                "rule_message": ["geom:start_latitude and geom:stop_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_latitude) and not (geom:start_latitude))  then false() else true()"],
                "rule_message": ["geom:start_latitude and geom:stop_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_longitude) and not (geom:stop_longitude))  then false() else true()"],
                "rule_message": ["geom:start_longitude and geom:stop_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_longitude) and not (geom:start_longitude))  then false() else true()"],
                "rule_message": ["geom:start_longitude and geom:stop_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subsolar_azimuth) and not (geom:stop_subsolar_azimuth))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_azimuth and geom:stop_subsolar_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subsolar_azimuth) and not (geom:start_subsolar_azimuth))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_azimuth and geom:stop_subsolar_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subsolar_latitude) and not (geom:stop_subsolar_latitude))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_latitude and geom:stop_subsolar_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subsolar_latitude) and not (geom:start_subsolar_latitude))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_latitude and geom:stop_subsolar_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subsolar_longitude) and not (geom:stop_subsolar_longitude))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_longitude and geom:stop_subsolar_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subsolar_longitude) and not (geom:start_subsolar_longitude))  then false() else true()"],
                "rule_message": ["geom:start_subsolar_longitude and geom:stop_subsolar_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subspacecraft_azimuth) and not (geom:stop_subspacecraft_azimuth))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_azimuth and geom:stop_subspacecraft_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subspacecraft_azimuth) and not (geom:start_subspacecraft_azimuth))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_azimuth and geom:stop_subspacecraft_azimuth, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subspacecraft_latitude) and not (geom:stop_subspacecraft_latitude))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_latitude and geom:stop_subspacecraft_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subspacecraft_latitude) and not (geom:start_subspacecraft_latitude))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_latitude and geom:stop_subspacecraft_latitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_subspacecraft_longitude) and not (geom:stop_subspacecraft_longitude))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_longitude and geom:stop_subspacecraft_longitude, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_subspacecraft_longitude) and not (geom:start_subspacecraft_longitude))  then false() else true()"],
                "rule_message": ["geom:start_subspacecraft_longitude and geom:stop_subspacecraft_longitude, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Distances_1"],
            "rule_context": ["geom:Distances_Min_Max"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_geocentric_distance) and not (geom:maximum_spacecraft_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_geocentric_distance and geom:maximum_spacecraft_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_geocentric_distance) and not (geom:minimum_spacecraft_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_geocentric_distance and geom:maximum_spacecraft_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_heliocentric_distance) and not (geom:maximum_spacecraft_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_heliocentric_distance and geom:maximum_spacecraft_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_heliocentric_distance) and not (geom:minimum_spacecraft_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_heliocentric_distance and geom:maximum_spacecraft_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_central_body_distance) and not (geom:maximum_spacecraft_central_body_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_central_body_distance and geom:maximum_spacecraft_central_body_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_central_body_distance) and not (geom:minimum_spacecraft_central_body_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_central_body_distance and geom:maximum_spacecraft_central_body_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_target_center_distance) and not (geom:maximum_spacecraft_target_center_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_center_distance and geom:maximum_spacecraft_target_center_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_target_center_distance) and not (geom:minimum_spacecraft_target_center_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_center_distance and geom:maximum_spacecraft_target_center_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_target_boresight_intercept_distance) and not (geom:maximum_spacecraft_target_boresight_intercept_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_boresight_intercept_distance and geom:maximum_spacecraft_target_boresight_intercept_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_target_boresight_intercept_distance) and not (geom:minimum_spacecraft_target_boresight_intercept_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_boresight_intercept_distance and geom:maximum_spacecraft_target_boresight_intercept_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_spacecraft_target_subspacecraft_distance) and not (geom:maximum_spacecraft_target_subspacecraft_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_subspacecraft_distance and geom:maximum_spacecraft_target_subspacecraft_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_spacecraft_target_subspacecraft_distance) and not (geom:minimum_spacecraft_target_subspacecraft_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_spacecraft_target_subspacecraft_distance and geom:maximum_spacecraft_target_subspacecraft_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_target_geocentric_distance) and not (geom:maximum_target_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_geocentric_distance and geom:maximum_target_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_target_geocentric_distance) and not (geom:minimum_target_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_geocentric_distance and geom:maximum_target_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_target_heliocentric_distance) and not (geom:maximum_target_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_heliocentric_distance and geom:maximum_target_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_target_heliocentric_distance) and not (geom:minimum_target_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_heliocentric_distance and geom:maximum_target_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:minimum_target_ssb_distance) and not (geom:maximum_target_ssb_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_ssb_distance and geom:maximum_target_ssb_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:maximum_target_ssb_distance) and not (geom:minimum_target_ssb_distance))  then false() else true()"],
                "rule_message": ["geom:minimum_target_ssb_distance and geom:maximum_target_ssb_distance, are a pair; if you use one, you must use both."]
            }]
        }, {
            "local_identifier": ["Distances_2"],
            "rule_context": ["geom:Distances_Start_Stop"],
            "DD_Rule_Statement": [{
                "rule_type": ["Assert"],
                "rule_test": ["ancestor::geom:Geometry_Orbiter/geom:geometry_start_time_utc and ancestor::geom:Geometry_Orbiter/geom:geometry_stop_time_utc"],
                "rule_message": ["geom:If you use the Distances_Start_Stop class, you must give values for Geometry_Orbiter/geometry_start_time_utc and Geometry_Orbiter/geometry_stop_time_utc."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_geocentric_distance) and not (geom:stop_spacecraft_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_geocentric_distance and geom:stop_spacecraft_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_geocentric_distance) and not (geom:start_spacecraft_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_geocentric_distance and geom:stop_spacecraft_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_heliocentric_distance) and not (geom:stop_spacecraft_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_heliocentric_distance and geom:stop_spacecraft_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_heliocentric_distance) and not (geom:start_spacecraft_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_heliocentric_distance and geom:stop_spacecraft_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_central_body_distance) and not (geom:stop_spacecraft_central_body_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_central_body_distance and geom:stop_spacecraft_central_body_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_central_body_distance) and not (geom:start_spacecraft_central_body_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_central_body_distance and geom:stop_spacecraft_central_body_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_target_center_distance) and not (geom:stop_spacecraft_target_center_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_center_distance and geom:stop_spacecraft_target_center_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_target_center_distance) and not (geom:start_spacecraft_target_center_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_center_distance and geom:stop_spacecraft_target_center_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_target_boresight_intercept_distance) and not (geom:stop_spacecraft_target_boresight_intercept_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_boresight_intercept_distance and geom:stop_spacecraft_target_boresight_intercept_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_target_boresight_intercept_distance) and not (geom:start_spacecraft_target_boresight_intercept_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_boresight_intercept_distance and geom:stop_spacecraft_target_boresight_intercept_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_spacecraft_target_subspacecraft_distance) and not (geom:stop_spacecraft_target_subspacecraft_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_subspacecraft_distance and geom:stop_spacecraft_target_subspacecraft_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_spacecraft_target_subspacecraft_distance) and not (geom:start_spacecraft_target_subspacecraft_distance))  then false() else true()"],
                "rule_message": ["geom:start_spacecraft_target_subspacecraft_distance and geom:stop_spacecraft_target_subspacecraft_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_target_geocentric_distance) and not (geom:stop_target_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_geocentric_distance and geom:stop_target_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_target_geocentric_distance) and not (geom:start_target_geocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_geocentric_distance and geom:stop_target_geocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_target_heliocentric_distance) and not (geom:stop_target_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_heliocentric_distance and geom:stop_target_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_target_heliocentric_distance) and not (geom:start_target_heliocentric_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_heliocentric_distance and geom:stop_target_heliocentric_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_target_ssb_distance) and not (geom:stop_target_ssb_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_ssb_distance and geom:stop_target_ssb_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_target_ssb_distance) and not (geom:start_target_ssb_distance))  then false() else true()"],
                "rule_message": ["geom:start_target_ssb_distance and geom:stop_target_ssb_distance, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:start_time) and not (geom:stop_time))  then false() else true()"],
                "rule_message": ["geom:start_time and geom:stop_time, are a pair; if you use one, you must use both."]
            }, {
                "rule_type": ["Assert"],
                "rule_test": ["if ((geom:stop_time) and not (geom:start_time))  then false() else true()"],
                "rule_message": ["geom:start_time and geom:stop_time, are a pair; if you use one, you must use both."]
            }]
        }]
    }
}